{"version":3,"file":"static/js/858.a2ccc13c.chunk.js","mappings":"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","sources":["dlxlib/dataObject.ts","dlxlib/columnObject.ts","dlxlib/dlx.ts","utils.ts","types.ts","worker/stop-token.ts","demos/pentominoes/orientation.ts","demos/sudoku/demo.ts","demos/pentominoes/pattern.ts","demos/draughtboard-puzzle/colour.ts","demos/draughtboard-puzzle/orientation.ts","demos/pentominoes/pieces.ts","demos/pentominoes/pieces-with-variations.ts","demos/pentominoes/demo.ts","demos/draughtboard-puzzle/pattern.ts","demos/tetrasticks/orientation.ts","demos/draughtboard-puzzle/pieces.ts","demos/draughtboard-puzzle/pieces-with-variations.ts","demos/draughtboard-puzzle/demo.ts","demos/n-queens/demo.ts","demos/aztec-diamond/orientation.ts","demos/tetrasticks/pieces.ts","demos/tetrasticks/variation.ts","demos/tetrasticks/pieces-with-variations.ts","demos/tetrasticks/demo.ts","demos/aztec-diamond/locations.ts","demos/kakuro/run-type.ts","demos/aztec-diamond/pieces.ts","demos/aztec-diamond/variation.ts","demos/aztec-diamond/pieces-with-variations.ts","demos/aztec-diamond/thumbnail.tsx","demos/aztec-diamond/drawing.tsx","demos/aztec-diamond/demo.ts","demos/ripple-effect/demo.ts","demos/flow-free/path-finder.ts","demos/flow-free/demo.ts","demos/kakuro/run.ts","demos/kakuro/permutations.ts","demos/nonogram/run-group-type.ts","demos/kakuro/demo.ts","demos/nonogram/demo.ts","demos/crossword/clue-type.ts","demos/crossword/demo.ts","worker/worker.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { ColumnObject } from \"./columnObject\"\n\nexport class DataObject {\n\n  public up: DataObject\n  public down: DataObject\n  public left: DataObject\n  public right: DataObject\n\n  public constructor(public listHeader?: ColumnObject, public rowIndex?: number) {\n    this.up = this\n    this.down = this\n    this.left = this\n    this.right = this\n    listHeader?.addDataObject(this)\n  }\n\n  public appendToRow(dataObject: DataObject) {\n    this.left.right = dataObject\n    dataObject.right = this\n    dataObject.left = this.left\n    this.left = dataObject\n  }\n\n  public appendToColumn(dataObject: DataObject) {\n    this.up.down = dataObject\n    dataObject.down = this\n    dataObject.up = this.up\n    this.up = dataObject\n  }\n\n  public unlinkFromColumn() {\n    this.down.up = this.up\n    this.up.down = this.down\n  }\n\n  public relinkIntoColumn() {\n    this.down.up = this\n    this.up.down = this\n  }\n\n  public loopUp(fn: (dataObject: DataObject) => void) { this.loop(fn, \"up\") }\n  public loopDown(fn: (dataObject: DataObject) => void) { this.loop(fn, \"down\") }\n  public loopLeft(fn: (dataObject: DataObject) => void) { this.loop(fn, \"left\") }\n  public loopRight(fn: (dataObject: DataObject) => void) { this.loop(fn, \"right\") }\n\n  private loop(\n    fn: (dataObject: DataObject) => void,\n    propName: \"up\" | \"down\" | \"left\" | \"right\"\n  ) {\n    for (let next = this[propName]; next !== this; next = next[propName]) {\n      fn(next)\n    }\n  }\n}\n","import { DataObject } from \"./dataObject\"\n\nexport class ColumnObject extends DataObject {\n\n  public previousColumnObject: ColumnObject\n  public nextColumnObject: ColumnObject\n  public numberOfRows: number\n\n  public constructor() {\n    super()\n    this.previousColumnObject = this\n    this.nextColumnObject = this\n    this.numberOfRows = 0\n  }\n\n  public appendColumnHeader(columnObject: ColumnObject) {\n    this.previousColumnObject.nextColumnObject = columnObject\n    columnObject.nextColumnObject = this\n    columnObject.previousColumnObject = this.previousColumnObject\n    this.previousColumnObject = columnObject\n  }\n\n  public unlinkColumnHeader() {\n    this.nextColumnObject.previousColumnObject = this.previousColumnObject\n    this.previousColumnObject.nextColumnObject = this.nextColumnObject\n  }\n\n  public relinkColumnHeader() {\n    this.nextColumnObject.previousColumnObject = this\n    this.previousColumnObject.nextColumnObject = this\n  }\n\n  public addDataObject(dataObject: DataObject) {\n    this.appendToColumn(dataObject)\n    this.numberOfRows++\n  }\n\n  public unlinkDataObject(dataObject: DataObject) {\n    dataObject.unlinkFromColumn()\n    this.numberOfRows--\n  }\n\n  public relinkDataObject(dataObject: DataObject) {\n    dataObject.relinkIntoColumn()\n    this.numberOfRows++\n  }\n\n  public loopNext(fn: (columnObject: ColumnObject) => void) {\n    for (let next = this.nextColumnObject; next !== this; next = next.nextColumnObject) {\n      fn(next)\n    }\n  }\n}\n","import EventEmitter from \"events\"\nimport { DataObject } from \"./dataObject\"\nimport { ColumnObject } from \"./columnObject\"\n\nexport type MatrixValue = any\nexport type MatrixRow = MatrixValue[]\nexport type Matrix = MatrixRow[]\n\nexport type Solution = number[]\nexport type PartialSolution = number[]\n\nexport type Options = {\n  numSolutions?: number\n  numPrimaryColumns?: number,\n  checkForCancellation?: () => boolean\n  checkForCancellationFrequency?: number\n}\n\nexport function solve(matrix: Matrix, options: Options) {\n  return new Dlx().solve(matrix, options)\n}\n\nexport class Dlx extends EventEmitter {\n\n  public constructor() {\n    super()\n  }\n\n  public solve(matrix: Matrix, options?: Options): Solution[] {\n    this.checkOptions(options)\n    const numSolutions = options?.numSolutions ?? Number.MAX_SAFE_INTEGER\n    const solutions = []\n    const iterator = this.solutionGenerator(matrix, options)\n    for (let index = 0; index < numSolutions; index++) {\n      const iteratorResult = iterator.next()\n      if (iteratorResult.done) break\n      solutions.push(iteratorResult.value)\n    }\n    return solutions\n  }\n\n  public * solutionGenerator(matrix: Matrix, options?: Options): Generator<Solution> {\n    this.checkOptions(options)\n    const root = buildInternalStructure(matrix, options)\n    const searchState = new SearchState(this, root)\n    yield* search(searchState, options)\n  }\n\n  private checkOptions = (options?: Options): void => {\n    if (options?.numSolutions !== undefined) {\n      if (!Number.isInteger(options.numSolutions)) {\n        throw new Error(\"options.numSolutions must be an integer\")\n      }\n      if (options.numSolutions < 0) {\n        throw new Error(\"options.numSolutions can't be negative - don't be silly\")\n      }\n    }\n\n    if (options?.numPrimaryColumns !== undefined) {\n      if (!Number.isInteger(options.numPrimaryColumns)) {\n        throw new Error(\"options.numPrimaryColumns must be an integer\")\n      }\n      if (options.numPrimaryColumns < 0) {\n        throw new Error(\"options.numPrimaryColumns can't be negative - don't be silly\")\n      }\n    }\n  }\n}\n\nconst buildInternalStructure = (matrix: Matrix, options?: Options) => {\n\n  const numPrimaryColumns = options?.numPrimaryColumns ?? matrix[0].length\n\n  const root = new ColumnObject()\n  const colIndexToListHeader = new Map()\n  let cancelled = false\n\n  matrix.forEach((row: MatrixRow, rowIndex: number) => {\n    if (rowIndex % 1000 === 0) {\n      if (options?.checkForCancellation?.()) {\n        cancelled = true\n      }\n    }\n    if (cancelled) return\n    let firstDataObjectInThisRow: DataObject | undefined = undefined\n    row.forEach((col, colIndex: number) => {\n      if (rowIndex === 0) {\n        const listHeader = new ColumnObject()\n        if (colIndex < numPrimaryColumns) {\n          root.appendColumnHeader(listHeader)\n        }\n        colIndexToListHeader.set(colIndex, listHeader)\n      }\n      if (col) {\n        const listHeader = colIndexToListHeader.get(colIndex)\n        const dataObject = new DataObject(listHeader, rowIndex)\n        if (firstDataObjectInThisRow)\n          firstDataObjectInThisRow.appendToRow(dataObject)\n        else\n          firstDataObjectInThisRow = dataObject\n      }\n    })\n  })\n\n  return root\n}\n\nconst byAscendingRowIndices = (rowIndex1: number, rowIndex2: number) =>\n  rowIndex1 - rowIndex2\n\nfunction* search(searchState: SearchState, options?: Options): Generator<Solution> {\n\n  const checkForCancellationFrequency = options?.checkForCancellationFrequency ?? 100\n  if (searchState.getStepIndex() % checkForCancellationFrequency === 0) {\n    if (options?.checkForCancellation?.()) {\n      return\n    }\n  }\n\n  searchState.raiseSearchStepEvent()\n\n  if (searchState.isEmpty()) {\n    if (searchState.currentSolution.length) {\n      searchState.raiseSolutionFoundEvent()\n      yield searchState.currentSolution.slice().sort(byAscendingRowIndices)\n    }\n    return\n  }\n\n  const c = chooseColumnWithFewestRows(searchState)\n  coverColumn(c)\n  for (let r = c.down; r !== c; r = r.down) {\n    searchState.pushRowIndex(r.rowIndex!)\n    r.loopRight(j => coverColumn(j.listHeader!))\n    yield* search(searchState, options)\n    r.loopLeft(j => uncoverColumn(j.listHeader!))\n    searchState.popRowIndex()\n  }\n  uncoverColumn(c)\n}\n\nconst chooseColumnWithFewestRows = (searchState: SearchState) => {\n  let chosenColumn: ColumnObject | undefined = undefined\n  searchState.root.loopNext(column => {\n    if (!chosenColumn || column.numberOfRows < chosenColumn.numberOfRows) {\n      chosenColumn = column\n    }\n  })\n  return chosenColumn!\n}\n\nconst coverColumn = (c: ColumnObject) => {\n  c.unlinkColumnHeader()\n  c.loopDown(i => i.loopRight(j => j.listHeader!.unlinkDataObject(j)))\n}\n\nconst uncoverColumn = (c: ColumnObject) => {\n  c.loopUp(i => i.loopLeft(j => j.listHeader!.relinkDataObject(j)))\n  c.relinkColumnHeader()\n}\n\nclass SearchState {\n\n  public currentSolution: number[] = []\n  private stepIndex: number = 0\n  private solutionIndex: number = 0\n\n  public constructor(private dlx: Dlx, public root: ColumnObject) {\n  }\n\n  public getStepIndex(): number {\n    return this.stepIndex\n  }\n\n  public isEmpty() {\n    return this.root.nextColumnObject === this.root\n  }\n\n  public pushRowIndex(rowIndex: number) {\n    this.currentSolution.push(rowIndex)\n  }\n\n  public popRowIndex() {\n    this.currentSolution.pop()\n  }\n\n  public raiseSearchStepEvent() {\n    if (this.dlx.listenerCount(\"step\") > 0 && this.currentSolution.length) {\n      const partialSolution: PartialSolution = this.currentSolution\n        .slice()\n        .sort(byAscendingRowIndices)\n      const e = {\n        partialSolution,\n        stepIndex: this.stepIndex++\n      }\n      this.dlx.emit(\"step\", e)\n    }\n  }\n\n  public raiseSolutionFoundEvent() {\n    if (this.dlx.listenerCount(\"solution\") > 0) {\n      const solution: Solution = this.currentSolution\n        .slice()\n        .sort(byAscendingRowIndices)\n      const e = {\n        solution,\n        solutionIndex: this.solutionIndex++\n      }\n      this.dlx.emit(\"solution\", e)\n    }\n  }\n}\n","export const range = (n: number) => Array.from(Array(n).keys())\nexport const sum = (ns: number[]): number => ns.reduce((acc, n) => acc + n, 0)\nexport const min = (ns: number[]): number => Math.min(...ns)\nexport const max = (ns: number[]): number => Math.max(...ns)\nexport function minBy<T>(xs: T[], selector: (x: T) => number): number { return min(xs.map(selector)) }\nexport function maxBy<T>(xs: T[], selector: (x: T) => number): number { return max(xs.map(selector)) }\nexport function first<T>(xs: T[]) { return xs[0] }\nexport function last<T>(xs: T[]) { return xs[xs.length - 1] }\n\nfunction defaultSameness<T>(x1: T, x2: T): boolean { return x1 === x2 }\n\nexport function except<T>(xs1: T[], xs2: T[], isSame: (x1: T, x2: T) => boolean = defaultSameness): T[] {\n  return xs1.filter(x1 => !xs2.some(x2 => isSame(x1, x2)))\n}\n\nexport function union<T>(xs1: T[], xs2: T[], isSame: (x1: T, x2: T) => boolean = defaultSameness): T[] {\n  return [...xs1].concat(xs2.filter(x2 => !xs1.some(x1 => isSame(x1, x2))))\n}\n\nexport function intersect<T>(xs1: T[], xs2: T[], isSame: (x1: T, x2: T) => boolean = defaultSameness): T[] {\n  const firstsInSecond = xs1.filter(x1 => xs2.some(x2 => isSame(x1, x2)))\n  const secondsInFirst = xs2.filter(x2 => xs1.some(x1 => isSame(x1, x2)))\n  return union(firstsInSecond, secondsInFirst, isSame)\n}\n\nexport const reverseString = (s: string): string => Array.from(s).reverse().join(\"\")\n","import { range } from \"utils\"\n\nexport type AvailableDemo = {\n  name: string,\n  shortName: string,\n  Thumbnail: React.FC,\n  hideBorder: boolean\n}\n\nexport type DrawingProps<TPuzzle, TInternalRow, TDrawingOptions = {}> = {\n  puzzle: TPuzzle,\n  solutionInternalRows: TInternalRow[],\n  drawingOptions: TDrawingOptions\n}\n\nexport type DemoControlsProps<TPuzzle, TDrawingOptions = {}> = {\n  selectedPuzzle: TPuzzle,\n  drawingOptions: TDrawingOptions,\n  onSelectedPuzzleChanged: (puzzle: TPuzzle) => void,\n  onDrawingOptionsChanged: (drawingOptions: TDrawingOptions) => void\n}\n\nexport interface IDemo<TPuzzle, TInternalRow> {\n  buildInternalRows(puzzle: TPuzzle, checkForCancellation: () => boolean): TInternalRow[]\n  internalRowToMatrixRow(internalRow: TInternalRow): number[]\n  getNumPrimaryColumns(puzzle: TPuzzle): number | undefined\n}\n\nexport type Coords = {\n  row: number,\n  col: number\n}\n\nexport const goUp = (coords: Coords): Coords => ({ row: coords.row - 1, col: coords.col })\nexport const goDown = (coords: Coords): Coords => ({ row: coords.row + 1, col: coords.col })\nexport const goLeft = (coords: Coords): Coords => ({ row: coords.row, col: coords.col - 1 })\nexport const goRight = (coords: Coords): Coords => ({ row: coords.row, col: coords.col + 1 })\n\nexport const sameCoords = (coords1: Coords, coords2: Coords): boolean =>\n  coords1.row === coords2.row && coords1.col === coords2.col\n\nexport const sameCoordsList = (coordsList1: Coords[], coordsList2: Coords[]): boolean => {\n  if (coordsList1.length !== coordsList2.length) return false\n  for (const index of range(coordsList1.length)) {\n    const coords1 = coordsList1[index]\n    const coords2 = coordsList2[index]\n    if (!sameCoords(coords1, coords2)) return false\n  }\n  return true\n}\n\nexport const coordsComparer = (coords1: Coords, coords2: Coords): number => {\n  const rowDiff = coords1.row - coords2.row\n  const colDiff = coords1.col - coords2.col\n  return rowDiff !== 0 ? rowDiff : colDiff\n}\n\nexport enum CurrentState {\n  Clean,\n  Solving,\n  Dirty\n}\n\nexport enum Mode {\n  FirstSolution,\n  SearchSteps\n}\n","// https://github.com/panstromek/zebra-rs/blob/82d616225930b3ad423a2c6d883c79b94ee08ba6/webzebra/src/stopToken.ts\n\nexport function createStopToken(): string {\n  return URL.createObjectURL(new Blob())\n}\n\nexport function stop(stopToken: string): void {\n  return URL.revokeObjectURL(stopToken)\n}\n\nexport function checkStopToken(stopToken: string): boolean {\n  const xhr = new XMLHttpRequest()\n  xhr.open(\"GET\", stopToken, false)\n  try {\n    xhr.send(null)\n  } catch {\n    return true\n  }\n  return false\n}\n","export enum Orientation { North, South, East, West }\n","import { Coords, IDemo, sameCoords } from \"types\"\nimport { range } from \"utils\"\nimport { InitialValue } from \"./initial-value\"\nimport { InternalRow } from \"./internal-row\"\nimport { Puzzle } from \"./puzzle\"\n\nexport class Demo implements IDemo<Puzzle, InternalRow> {\n  buildInternalRows(puzzle: Puzzle, checkForCancellation: () => boolean): InternalRow[] {\n    const allCoords = range(9).flatMap(row => range(9).map(col => ({ row, col })))\n    return allCoords.flatMap(coords => {\n      const initialValue = puzzle.initialValues.find(iv => sameCoords(iv.coords, coords))\n      return initialValue\n        ? this._buildInternalRowsForInitialValue(initialValue)\n        : this._buildInternalRowsForCoords(coords)\n    })\n  }\n\n  _buildInternalRowsForInitialValue(initialValue: InitialValue): InternalRow[] {\n    return [{ ...initialValue, isInitialValue: true }]\n  }\n\n  _buildInternalRowsForCoords(coords: Coords): InternalRow[] {\n    return range(9).map(n => n + 1).map(value => ({\n      coords,\n      value,\n      isInitialValue: false\n    }))\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const { row, col } = internalRow.coords\n    const box = this._rowColToBox(row, col);\n    const zeroBasedValue = internalRow.value - 1\n    const posColumns = this._oneHot(row, col);\n    const rowColumns = this._oneHot(row, zeroBasedValue);\n    const colColumns = this._oneHot(col, zeroBasedValue);\n    const boxColumns = this._oneHot(box, zeroBasedValue);\n    return posColumns\n      .concat(rowColumns)\n      .concat(colColumns)\n      .concat(boxColumns)\n  }\n\n  _oneHot(major: number, minor: number): number[] {\n    const columns = Array(81).fill(0)\n    columns[major * 9 + minor] = 1\n    return columns\n  }\n\n  _rowColToBox(row: number, col: number): number {\n    return Math.floor(row - (row % 3) + (col / 3))\n  }\n\n  getNumPrimaryColumns(puzzle: Puzzle): number | undefined {\n    return undefined\n  }\n}\n","import { Coords } from \"types\"\nimport { range, reverseString } from \"utils\"\n\nexport const rotateCW = (pattern: string[]): string[] => {\n  const rowCount = pattern.length\n  const colCount = pattern[0].length\n  const rowIndices = range(rowCount)\n  const colIndices = range(colCount)\n  const transposed = colIndices.map(col => rowIndices.map(row => pattern[row][col]).join(\"\"))\n  return reflect(transposed)\n}\n\nexport const reflect = (pattern: string[]): string[] => {\n  return pattern.map(reverseString)\n}\n\nexport const toCoordsList = (pattern: string[]): Coords[] => {\n  const rowCount = pattern.length\n  const colCount = pattern[0].length\n  const coordsList: Coords[] = []\n\n  for (const row of range(rowCount)) {\n    for (const col of range(colCount)) {\n      if (pattern[row][col] === \"X\") {\n        const coords = { row, col }\n        coordsList.push(coords)\n      }\n    }\n  }\n\n  return coordsList\n}\n","export enum Colour { Black, White }\n","export enum Orientation { North, South, East, West }\n","import { Piece } from \"./piece\"\n\n// https://en.wikipedia.org/wiki/Pentomino\nconst piecesMap = new Map<string, string[]>([\n  [\n    \"F\",\n    [\n      \" XX\",\n      \"XX \",\n      \" X \"\n    ]\n  ],\n  [\n    \"I\",\n    [\n      \"X\",\n      \"X\",\n      \"X\",\n      \"X\",\n      \"X\"\n    ]\n  ],\n  [\n    \"L\",\n    [\n      \"X \",\n      \"X \",\n      \"X \",\n      \"XX\"\n    ]\n  ],\n  [\n    \"N\",\n    [\n      \" X\",\n      \" X\",\n      \"XX\",\n      \"X \"\n    ]\n  ],\n  [\n    \"P\",\n    [\n      \"XX\",\n      \"XX\",\n      \"X \"\n    ]\n  ],\n  [\n    \"T\",\n    [\n      \"XXX\",\n      \" X \",\n      \" X \"\n    ]\n  ],\n  [\n    \"U\",\n    [\n      \"X X\",\n      \"XXX\"\n    ]\n  ],\n  [\n    \"V\",\n    [\n      \"X  \",\n      \"X  \",\n      \"XXX\"\n    ]\n  ],\n  [\n    \"W\",\n    [\n      \"X  \",\n      \"XX \",\n      \" XX\"\n    ]\n  ],\n  [\n    \"X\",\n    [\n      \" X \",\n      \"XXX\",\n      \" X \"\n    ]\n  ],\n  [\n    \"Y\",\n    [\n      \" X\",\n      \"XX\",\n      \" X\",\n      \" X\"\n    ]\n  ],\n  [\n    \"Z\",\n    [\n      \"XX \",\n      \" X \",\n      \" XX\"\n    ]\n  ],\n])\n\nexport const pieces: Piece[] =\n  Array.from(piecesMap)\n    .map(([label, pattern]) => ({ label, pattern }))\n","import { Orientation } from \"./orientation\"\nimport { reflect, rotateCW, toCoordsList } from \"./pattern\"\nimport { Piece } from \"./piece\"\nimport { PieceWithVariations } from \"./piece-with-variations\"\nimport { pieces } from \"./pieces\"\nimport { Variation } from \"./variation\"\n\ntype VariationCandidate = {\n  orientation: Orientation,\n  reflected: boolean,\n  pattern: string[]\n}\n\nconst reflectVariationCandidate = (vc: VariationCandidate): VariationCandidate => {\n  return {\n    ...vc,\n    reflected: true,\n    pattern: reflect(vc.pattern)\n  }\n}\n\nconst makeVariation = (vc: VariationCandidate): Variation => ({\n  orientation: vc.orientation,\n  reflected: vc.reflected,\n  coordsList: toCoordsList(vc.pattern)\n})\n\nconst findUniqueVariations = (piece: Piece): PieceWithVariations => {\n  const { label, pattern } = piece\n\n  const north = { orientation: Orientation.North, reflected: false, pattern }\n  const northReflected = reflectVariationCandidate(north)\n\n  const east = { orientation: Orientation.East, reflected: false, pattern: rotateCW(north.pattern) }\n  const eastReflected = reflectVariationCandidate(east)\n\n  const south = { orientation: Orientation.South, reflected: false, pattern: rotateCW(east.pattern) }\n  const southReflected = reflectVariationCandidate(south)\n\n  const west = { orientation: Orientation.West, reflected: false, pattern: rotateCW(south.pattern) }\n  const westReflected = reflectVariationCandidate(west)\n\n  const allVariationCandidates = [\n    north, northReflected,\n    east, eastReflected,\n    south, southReflected,\n    west, westReflected\n  ]\n\n  const representations = new Set<string>()\n  const uniqueVariationCandidates: VariationCandidate[] = []\n  for (const vc of allVariationCandidates) {\n    const representation = vc.pattern.join(\"|\")\n    if (!representations.has(representation)) {\n      representations.add(representation)\n      uniqueVariationCandidates.push(vc)\n    }\n  }\n\n  const variations = uniqueVariationCandidates.map(makeVariation)\n\n  return { label, variations }\n}\n\nexport const piecesWithVariations = pieces.map(findUniqueVariations)\n","import { IDemo } from \"types\"\nimport { range } from \"utils\"\nimport { InternalRow } from \"./internal-row\"\nimport { piecesWithVariations } from \"./pieces-with-variations\"\n\nexport class Demo implements IDemo<{}, InternalRow> {\n\n  buildInternalRows(puzzle: {}, checkForCancellation: () => boolean): InternalRow[] {\n    return this.allPossiblePiecePlacements()\n      .filter(internalRow => this.isValidPiecePlacement(internalRow))\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const pieceColumns = this.makePieceColumns(internalRow)\n    const locationColumns = this.makeLocationColumns(internalRow)\n    return pieceColumns.concat(locationColumns)\n  }\n\n  getNumPrimaryColumns(puzzle: {}): number | undefined {\n    return undefined\n  }\n\n  allLocations =\n    range(8).flatMap(row =>\n      range(8).map(col =>\n        ({ row, col })))\n\n  isValidPiecePlacement(internalRow: InternalRow): boolean {\n    for (const coords of internalRow.variation.coordsList) {\n      const row = internalRow.location.row + coords.row\n      const col = internalRow.location.col + coords.col\n      if (row >= 8 || col >= 8) return false\n      if ((row === 3 || row === 4) && (col === 3 || col === 4)) return false\n    }\n    return true\n  }\n\n  allPossiblePiecePlacements(): InternalRow[] {\n    const internalRows: InternalRow[] = []\n    const fixedPieceLabels = piecesWithVariations.slice(0, 1).map(({ label }) => label)\n\n    for (const pieceWithVariations of piecesWithVariations) {\n      const variations = fixedPieceLabels.includes(pieceWithVariations.label)\n        ? pieceWithVariations.variations.slice(0, 1)\n        : pieceWithVariations.variations\n\n      for (const variation of variations) {\n        for (const location of this.allLocations) {\n          const label = pieceWithVariations.label\n          const internalRow = { label, variation, location }\n          internalRows.push(internalRow)\n        }\n      }\n    }\n\n    return internalRows\n  }\n\n  makePieceColumns(internalRow: InternalRow): number[] {\n    const columns = Array(piecesWithVariations.length).fill(0)\n    const pieceIndex = piecesWithVariations.findIndex(pwv => pwv.label === internalRow.label)\n    columns[pieceIndex] = 1\n    return columns\n  }\n\n  makeLocationColumns(internalRow: InternalRow): number[] {\n    const indices = internalRow.variation.coordsList.map(coords => {\n      const row = internalRow.location.row + coords.row\n      const col = internalRow.location.col + coords.col\n      return row * 8 + col\n    })\n\n    const columns = Array(8 * 8).fill(0)\n\n    for (const index of indices) {\n      columns[index] = 1\n    }\n\n    const indicesToExclude = [\n      3 * 8 + 3,\n      3 * 8 + 4,\n      4 * 8 + 3,\n      4 * 8 + 4\n    ]\n\n    return columns.filter((_, index) => !indicesToExclude.includes(index))\n  }\n}\n","import { range, reverseString } from \"utils\"\nimport { Colour } from \"./colour\"\nimport { Square } from \"./square\"\n\nexport const rotateCW = (pattern: string[]): string[] => {\n  const rowCount = pattern.length\n  const colCount = pattern[0].length\n  const rowIndices = range(rowCount)\n  const colIndices = range(colCount)\n  const transposed = colIndices.map(col => rowIndices.map(row => pattern[row][col]).join(\"\"))\n  return reflect(transposed)\n}\n\nexport const reflect = (pattern: string[]): string[] => {\n  return pattern.map(reverseString)\n}\n\nexport const toSquares = (pattern: string[]): Square[] => {\n  const rowCount = pattern.length\n  const colCount = pattern[0].length\n  const squares: Square[] = []\n\n  for (const row of range(rowCount)) {\n    for (const col of range(colCount)) {\n      const coords = { row, col }\n      switch (pattern[row][col]) {\n        case \"B\":\n          squares.push({coords, colour: Colour.Black})\n          break\n        case \"W\":\n          squares.push({coords, colour: Colour.White})\n          break\n      }\n    }\n  }\n\n  return squares\n}\n","export enum Orientation {\n  North,\n  South,\n  East,\n  West\n}\n\nexport const rotateCW = (orientation: Orientation): Orientation => {\n  switch (orientation) {\n    case Orientation.North: return Orientation.East\n    case Orientation.South: return Orientation.West\n    case Orientation.East: return Orientation.South\n    case Orientation.West: return Orientation.North\n  }\n}\n","import { Piece } from \"./piece\"\n\nconst piecesMap = new Map<string, string[]>([\n  [\n    \"A\",\n    [\n      \"B \",\n      \"WB\",\n      \"B \",\n      \"W \"\n    ]\n  ],\n  [\n    \"B\",\n    [\n      \"B  \",\n      \"WBW\"\n    ],\n  ],\n  [\n    \"C\",\n    [\n      \"W \",\n      \"BW\"\n    ]\n  ],\n  [\n    \"D\",\n    [\n      \" WB\",\n      \" B \",\n      \"BW \"\n    ]\n  ],\n  [\n    \"E\",\n    [\n      \"W \",\n      \"BW\",\n      \" B\",\n      \" W\"\n    ]\n  ],\n  [\n    \"F\",\n    [\n      \"WB \",\n      \" W \",\n      \" BW\"\n    ]\n  ],\n  [\n    \"G\",\n    [\n      \"WB \",\n      \" WB\"\n    ]\n  ],\n  [\n    \"H\",\n    [\n      \"B \",\n      \"WB\",\n      \"B \"\n    ]\n  ],\n  [\n    \"I\",\n    [\n      \"B \",\n      \"W \",\n      \"BW\",\n      \"W \"\n    ]\n  ],\n  [\n    \"J\",\n    [\n      \" B\",\n      \" W\",\n      \" B\",\n      \"BW\"\n    ]\n  ],\n  [\n    \"K\",\n    [\n      \"  W\",\n      \" WB\",\n      \"WB \"\n    ]\n  ],\n  [\n    \"L\",\n    [\n      \"B \",\n      \"W \",\n      \"BW\"\n    ]\n  ],\n  [\n    \"M\",\n    [\n      \" B\",\n      \" W\",\n      \"WB\",\n      \"B \"\n    ]\n  ],\n  [\n    \"N\",\n    [\n      \"W \",\n      \"B \",\n      \"W \",\n      \"BW\"\n    ]\n  ]\n])\n\nexport const pieces: Piece[] =\n  Array.from(piecesMap)\n    .map(([label, pattern]) => ({ label, pattern }))\n","import { Orientation } from \"./orientation\"\nimport { rotateCW, toSquares } from \"./pattern\"\nimport { Piece } from \"./piece\"\nimport { PieceWithVariations } from \"./piece-with-variations\"\nimport { pieces } from \"./pieces\"\nimport { Variation } from \"./variation\"\n\ntype VariationCandidate = {\n  orientation: Orientation,\n  pattern: string[]\n}\n\nconst makeVariation = (vc: VariationCandidate): Variation => ({\n  orientation: vc.orientation,\n  squares: toSquares(vc.pattern)\n})\n\nconst findUniqueVariations = (piece: Piece): PieceWithVariations => {\n  const { label, pattern } = piece\n\n  const north = { orientation: Orientation.North, pattern }\n  const east = { orientation: Orientation.East, pattern: rotateCW(north.pattern) }\n  const south = { orientation: Orientation.South, pattern: rotateCW(east.pattern) }\n  const west = { orientation: Orientation.West, pattern: rotateCW(south.pattern) }\n\n  const allVariationCandidates = [north, east, south, west]\n\n  const representations = new Set<string>()\n  const uniqueVariationCandidates: VariationCandidate[] = []\n  for (const vc of allVariationCandidates) {\n    const representation = vc.pattern.join(\"|\")\n    if (!representations.has(representation)) {\n      representations.add(representation)\n      uniqueVariationCandidates.push(vc)\n    }\n  }\n\n  const variations = uniqueVariationCandidates.map(makeVariation)\n\n  return { label, variations }\n}\n\nexport const piecesWithVariations = pieces.map(findUniqueVariations)\n","import { IDemo } from \"types\"\nimport { range } from \"utils\"\nimport { Colour } from \"./colour\"\nimport { InternalRow } from \"./internal-row\"\nimport { piecesWithVariations } from \"./pieces-with-variations\"\n\nexport class Demo implements IDemo<{}, InternalRow> {\n\n  buildInternalRows(puzzle: {}, checkForCancellation: () => boolean): InternalRow[] {\n    return this.allPossiblePiecePlacements()\n      .filter(internalRow => this.isValidPiecePlacement(internalRow))\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const pieceColumns = this.makePieceColumns(internalRow)\n    const locationColumns = this.makeLocationColumns(internalRow)\n    return pieceColumns.concat(locationColumns)\n  }\n\n  getNumPrimaryColumns(puzzle: {}): number | undefined {\n    return undefined\n  }\n\n  allLocations =\n    range(8).flatMap(row =>\n      range(8).map(col =>\n        ({ row, col })))\n\n  isValidPiecePlacement(internalRow: InternalRow): boolean {\n    for (const square of internalRow.variation.squares) {\n      const { coords, colour } = square\n      const row = internalRow.location.row + coords.row\n      const col = internalRow.location.col + coords.col\n      if (row < 0 || row >= 8) return false\n      if (col < 0 || col >= 8) return false\n      const requiredColour = (row + col) % 2 !== 0 ? Colour.White : Colour.Black\n      if (colour !== requiredColour) return false\n    }\n    return true\n  }\n\n  allPossiblePiecePlacements(): InternalRow[] {\n    const internalRows: InternalRow[] = []\n    const fixedPieceLabels = piecesWithVariations.slice(0, 1).map(({ label }) => label)\n\n    for (const pieceWithVariations of piecesWithVariations) {\n      const variations = fixedPieceLabels.includes(pieceWithVariations.label)\n        ? pieceWithVariations.variations.slice(0, 1)\n        : pieceWithVariations.variations\n\n      for (const variation of variations) {\n        for (const location of this.allLocations) {\n          const label = pieceWithVariations.label\n          const internalRow = { label, variation, location }\n          internalRows.push(internalRow)\n        }\n      }\n    }\n\n    return internalRows\n  }\n\n  makePieceColumns(internalRow: InternalRow): number[] {\n    const columns = Array(piecesWithVariations.length).fill(0)\n    const pieceIndex = piecesWithVariations.findIndex(pwv => pwv.label === internalRow.label)\n    columns[pieceIndex] = 1\n    return columns\n  }\n\n  makeLocationColumns(internalRow: InternalRow): number[] {\n    const indices = internalRow.variation.squares.map(square => {\n      const { coords } = square\n      const row = internalRow.location.row + coords.row\n      const col = internalRow.location.col + coords.col\n      return row * 8 + col\n    })\n\n    const columns = Array(8 * 8).fill(0)\n\n    for (const index of indices) {\n      columns[index] = 1\n    }\n\n    return columns\n  }\n}\n","import { IDemo } from \"types\"\nimport { range } from \"utils\"\nimport { Puzzle } from \"./puzzle\"\nimport { InternalRow } from \"./internal-row\"\n\nexport class Demo implements IDemo<Puzzle, InternalRow> {\n  buildInternalRows(puzzle: Puzzle, checkForCancellation: () => boolean): InternalRow[] {\n    const allLocations = range(puzzle.size).flatMap(row =>\n      range(puzzle.size).map(col =>\n        ({ row, col })))\n    return allLocations.map(coords => ({ puzzle, coords }))\n  }\n\n  getNumPrimaryColumns(puzzle: Puzzle): number | undefined {\n    return puzzle.size * 2\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const { row, col } = internalRow.coords\n    const size = internalRow.puzzle.size\n    const diagonalColumnCount = size + size - 3\n\n    const rowColumns = Array(size).fill(0)\n    const colColumns = Array(size).fill(0)\n    const diagonal1Columns = Array(diagonalColumnCount).fill(0)\n    const diagonal2Columns = Array(diagonalColumnCount).fill(0)\n\n    rowColumns[row] = 1\n    colColumns[col] = 1\n\n    const diagonal1 = row + col - 1\n    if (diagonal1 >= 0 && diagonal1 < diagonalColumnCount) diagonal1Columns[diagonal1] = 1\n\n    const diagonal2 = size - 1 - col + row - 1\n    if (diagonal2 >= 0 && diagonal2 < diagonalColumnCount) diagonal2Columns[diagonal2] = 1\n\n    return rowColumns\n      .concat(colColumns)\n      .concat(diagonal1Columns)\n      .concat(diagonal2Columns)\n  }\n}\n","export enum Orientation {\n  North,\n  South,\n  East,\n  West\n}\n\nexport const rotateCW = (orientation: Orientation): Orientation => {\n  switch (orientation) {\n    case Orientation.North: return Orientation.East\n    case Orientation.South: return Orientation.West\n    case Orientation.East: return Orientation.South\n    case Orientation.West: return Orientation.North\n  }\n}\n","import { Coords } from \"types\"\nimport { Piece } from \"./piece\"\n\nconst piecesMap = new Map<string, { lineSegments: string, polyLines: string }>([\n  [\"F\", { lineSegments: \"H00 V00 H10 V10\", polyLines: \"0,1 0,0 1,0 1,1|1,1 1,0 2,0\" }],\n  [\"H\", { lineSegments: \"V00 V10 H10 V11\", polyLines: \"0,0 1,0 1,1 2,1|2,0 1,0 1,1 2,1\" }],\n  [\"I\", { lineSegments: \"V00 V10 V20 V30 I10 I20 I30\", polyLines: \"0,0 1,0 2,0 3,0 4,0\" }],\n  [\"J\", { lineSegments: \"V10 H20 V11 V01 I11\", polyLines: \"1,0 2,0 2,1 1,1 0,1\" }],\n  [\"L\", { lineSegments: \"V00 V10 V20 H30 I10 I20\", polyLines: \"0,0 1,0 2,0 3,0 3,1\" }],\n  [\"N\", { lineSegments: \"V20 H20 V01 V11 I11\", polyLines: \"3,0 2,0 2,1 1,1 0,1\" }],\n  [\"O\", { lineSegments: \"H00 V01 H10 V00\", polyLines: \"0,0 0,1 1,1 1,0 0,0\" }],\n  [\"P\", { lineSegments: \"H00 V01 H10 V10\", polyLines: \"0,0 0,1 1,1 1,0 2,0\" }],\n  [\"R\", { lineSegments: \"H10 V11 V01 H01\", polyLines: \"1,0 1,1 2,1|1,0 1,1 0,1 0,2\" }],\n  [\"T\", { lineSegments: \"H00 H01 V01 V11 I11\", polyLines: \"0,0 0,1 1,1 2,1|0,2 0,1 1,1 2,1\" }],\n  [\"U\", { lineSegments: \"V00 H10 H11 V02 I11\", polyLines: \"0,0 1,0 1,1 1,2 0,2\" }],\n  [\"V\", { lineSegments: \"V00 V10 H20 H21 I10 I21\", polyLines: \"0,0 1,0 2,0 2,1 2,2\" }],\n  [\"W\", { lineSegments: \"V00 H10 V11 H21\", polyLines: \"0,0 1,0 1,1 2,1 2,2\" }],\n  [\"X\", { lineSegments: \"V01 V11 H10 H11\", polyLines: \"1,0 1,1 0,1|0,1 1,1 1,2|1,2 1,1 2,1|2,1 1,1 1,0\" }],\n  [\"Y\", { lineSegments: \"H10 V01 V11 V21 I21\", polyLines: \"1,0 1,1 0,1|1,0 1,1 2,1 3,1\" }],\n  [\"Z\", { lineSegments: \"H00 V01 V11 H21 I11\", polyLines: \"0,0 0,1 1,1 2,1 2,2\" }]\n])\n\nconst parsePiece = (\n  label: string,\n  lineSegmentDescriptions: string,\n  polyLineDescriptions: string\n): Piece => {\n  const horizontals: Coords[] = []\n  const verticals: Coords[] = []\n  const junctions: Coords[] = []\n  const polyLines = parsePolyLineDescriptions(polyLineDescriptions)\n\n  const bits = lineSegmentDescriptions.split(/\\s/).map(s => s.trim()).filter(Boolean)\n\n  for (const bit of bits) {\n    const type = bit[0]\n    const row = Number(bit[1])\n    const col = Number(bit[2])\n    const coords = { row, col }\n    switch (type) {\n      case \"H\":\n        horizontals.push(coords)\n        break\n      case \"V\":\n        verticals.push(coords)\n        break\n      case \"I\":\n        junctions.push(coords)\n        break\n    }\n  }\n\n  return { label, horizontals, verticals, junctions, polyLines: polyLines }\n}\n\nconst parsePolyLineDescriptions = (polyLineDescriptions: string): Coords[][] => {\n  return polyLineDescriptions\n    .split(\"|\")\n    .map(s => s.trim())\n    .filter(Boolean)\n    .map(parsePolyLineDescription)\n}\n\nconst parsePolyLineDescription = (polyLineDescription: string): Coords[] => {\n  return polyLineDescription\n    .split(/\\s/)\n    .map(s => s.trim())\n    .filter(Boolean)\n    .map(coordsString => {\n      const row = Number(coordsString[0])\n      const col = Number(coordsString[2])\n      return { row, col }\n    })\n}\n\nexport const pieces =\n  Array.from(piecesMap)\n    .map(([label, { lineSegments, polyLines }]) =>\n      parsePiece(label, lineSegments, polyLines))\n","import { Coords, coordsComparer } from \"types\"\nimport { maxBy } from \"utils\"\nimport { Orientation, rotateCW as rotateOrientationCW } from \"./orientation\"\n\nexport type Variation = {\n  orientation: Orientation,\n  reflected: boolean,\n  horizontals: Coords[],\n  verticals: Coords[],\n  junctions: Coords[]\n  polyLines: Coords[][]\n}\n\nexport const getDimensions = (variation: Variation): { width: number, height: number } => {\n  const width = variation.horizontals.length ? maxBy(variation.horizontals, h => h.col) + 1 : 0\n  const height = variation.verticals.length ? maxBy(variation.verticals, v => v.row) + 1 : 0\n  return { width, height }\n}\n\nexport const reflect = (variation: Variation): Variation => {\n  const { width } = getDimensions(variation)\n  const newHorizontals = variation.horizontals.map(c => ({ row: c.row, col: width - c.col - 1 }))\n  const newVerticals = variation.verticals.map(c => ({ row: c.row, col: width - c.col }))\n  const newJunctions = variation.junctions.map(c => ({ row: c.row, col: width - c.col }))\n  const newPolyLines = variation.polyLines.map(polyLine => polyLine.map(c => ({ row: c.row, col: width - c.col })))\n\n  return {\n    orientation: variation.orientation,\n    reflected: !variation.reflected,\n    horizontals: newHorizontals,\n    verticals: newVerticals,\n    junctions: newJunctions,\n    polyLines: newPolyLines\n  }\n}\n\nexport const rotateCW = (variation: Variation): Variation => {\n  const { height } = getDimensions(variation)\n  const newHorizontals = variation.verticals.map(c => ({ row: c.col, col: height - c.row - 1 }))\n  const newVerticals = variation.horizontals.map(c => ({ row: c.col, col: height - c.row }))\n  const newJunctions = variation.junctions.map(c => ({ row: c.col, col: height - c.row }))\n  const newPolyLines = variation.polyLines.map(polyLine => polyLine.map(c => ({ row: c.col, col: height - c.row })))\n\n  return {\n    orientation: rotateOrientationCW(variation.orientation),\n    reflected: variation.reflected,\n    horizontals: newHorizontals,\n    verticals: newVerticals,\n    junctions: newJunctions,\n    polyLines: newPolyLines\n  }\n}\n\nexport const normalisedRepresentation = (variation: Variation): string => {\n  const sortedHorizontals = variation.horizontals.slice().sort(coordsComparer)\n  const sortedVerticals = variation.verticals.slice().sort(coordsComparer)\n  const hs = sortedHorizontals.map(coords => `H${coords.row}:${coords.col}`)\n  const vs = sortedVerticals.map(coords => `V${coords.row}:${coords.col}`)\n  return hs.concat(vs).join(\"-\")\n}\n","import { Orientation } from \"./orientation\"\nimport { Piece } from \"./piece\"\nimport { pieces } from \"./pieces\"\nimport { PieceWithVariations } from \"./piece-with-variations\"\nimport { normalisedRepresentation, reflect, rotateCW, Variation } from \"./variation\"\n\nconst findUniqueVariations = (piece: Piece): PieceWithVariations => {\n  const north = {\n    orientation: Orientation.North,\n    reflected: false,\n    horizontals: piece.horizontals,\n    verticals: piece.verticals,\n    junctions: piece.junctions,\n    polyLines: piece.polyLines\n  }\n  const northReflected = reflect(north)\n\n  const east = rotateCW(north)\n  const eastReflected = reflect(east)\n\n  const south = rotateCW(east)\n  const southReflected = reflect(south)\n\n  const west = rotateCW(south)\n  const westReflected = reflect(west)\n\n  const allVariations = [\n    north, northReflected,\n    east, eastReflected,\n    south, southReflected,\n    west, westReflected\n  ]\n\n  const representations = new Set<string>()\n  const uniqueVariations: Variation[] = []\n  allVariations.forEach(variation => {\n    const representation = normalisedRepresentation(variation)\n    if (!representations.has(representation)) {\n      representations.add(representation)\n      uniqueVariations.push(variation)\n    }\n  })\n\n  return { label: piece.label, variations: uniqueVariations }\n}\n\nexport const piecesWithVariations = pieces.map(findUniqueVariations)\n","import { IDemo } from \"types\"\nimport { range } from \"utils\"\nimport { InternalRow } from \"./internal-row\"\nimport { PieceWithVariations } from \"./piece-with-variations\"\nimport { piecesWithVariations } from \"./pieces-with-variations\"\nimport { Puzzle } from \"./puzzle\"\n\nexport class Demo implements IDemo<Puzzle, InternalRow> {\n\n  buildInternalRows(puzzle: Puzzle, checkForCancellation: () => boolean): InternalRow[] {\n    return this.allPossiblePiecePlacements(puzzle).filter(this.isValidPiecePlacement)\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const pieceColumns = this.makePieceColumns(internalRow)\n    const horizontalsColumns = this.makeHorizontalsColumns(internalRow)\n    const vertialsColumns = this.makeVerticalsColumns(internalRow)\n    const junctionsColumns = this.makeJunctionsColumns(internalRow)\n    return pieceColumns\n      .concat(horizontalsColumns)\n      .concat(vertialsColumns)\n      .concat(junctionsColumns)\n  }\n\n  getNumPrimaryColumns(puzzle: Puzzle): number | undefined {\n    const numPieces = 15\n    const numHorizontals = 30\n    const numVerticals = 30\n    return numPieces + numHorizontals + numVerticals\n  }\n\n  allLocations =\n    range(9).flatMap(row =>\n      range(9).map(col =>\n        ({ row, col })))\n\n  getPiecesInPlay(puzzle: Puzzle): PieceWithVariations[] {\n    return piecesWithVariations.filter(pwv => pwv.label !== puzzle.pieceToOmit.label)\n  }\n\n  isValidPiecePlacement(internalRow: InternalRow): boolean {\n    const { location } = internalRow\n\n    for (const horizontal of internalRow.variation.horizontals) {\n      const row = location.row + horizontal.row\n      const col = location.col + horizontal.col\n      if (row > 5) return false // valid rows for horizontal line segments: 0..5\n      if (col > 4) return false // valid cols for horizontal line segments: 0..4\n    }\n\n    for (const vertical of internalRow.variation.verticals) {\n      const row = location.row + vertical.row\n      const col = location.col + vertical.col\n      if (row > 4) return false // valid rows for vertical line segments: 0..4\n      if (col > 5) return false // valid cols for vertical line segments: 0..5\n    }\n\n    return true\n  }\n\n  allPossiblePiecePlacements(puzzle: Puzzle): InternalRow[] {\n    const internalRows: InternalRow[] = []\n    const fixedPieceLabels = piecesWithVariations.slice().reverse().slice(0, 1).map(({ label }) => label)\n    const piecesInPlay = this.getPiecesInPlay(puzzle)\n\n    for (const pieceWithVariations of piecesInPlay) {\n      const variations = fixedPieceLabels.includes(pieceWithVariations.label)\n        ? pieceWithVariations.variations.slice(0, 1)\n        : pieceWithVariations.variations\n\n      for (const variation of variations) {\n        for (const location of this.allLocations) {\n          const label = pieceWithVariations.label\n          const internalRow = { puzzle, label, variation, location }\n          internalRows.push(internalRow)\n        }\n      }\n    }\n\n    return internalRows\n  }\n\n  makePieceColumns(internalRow: InternalRow): number[] {\n    const piecesInPlay = this.getPiecesInPlay(internalRow.puzzle)\n    const columns = Array(piecesInPlay.length).fill(0)\n    const index = piecesInPlay.findIndex(pip => pip.label === internalRow.label)\n    columns[index] = 1\n    return columns\n  }\n\n  makeHorizontalsColumns(internalRow: InternalRow): number[] {\n    const { location } = internalRow\n    const columns = Array(30).fill(0)\n    for (const horizontal of internalRow.variation.horizontals) {\n      const row = location.row + horizontal.row\n      const col = location.col + horizontal.col\n      columns[row * 5 + col] = 1\n    }\n    return columns\n  }\n\n  makeVerticalsColumns(internalRow: InternalRow): number[] {\n    const { location } = internalRow\n    const columns = Array(30).fill(0)\n    for (const vertical of internalRow.variation.verticals) {\n      const row = location.row + vertical.row\n      const col = location.col + vertical.col\n      columns[col * 5 + row] = 1\n    }\n    return columns\n  }\n\n  makeJunctionsColumns(internalRow: InternalRow): number[] {\n    const { location } = internalRow\n    const columns = Array(16).fill(0)\n    for (const junction of internalRow.variation.junctions) {\n      const row = location.row + junction.row\n      const col = location.col + junction.col\n      if (row > 0 && row < 5 && col > 0 && col < 5) {\n        columns[(row - 1) * 4 + col - 1] = 1\n      }\n    }\n    return columns\n  }\n}\n","import { Coords, goLeft, sameCoords } from \"types\"\nimport { range } from \"utils\"\n\nexport const allHorizontals: Coords[] =\n  range(10).flatMap(row => range(9).map(col => ({ row, col })))\n    .filter(({ row, col }) => {\n      const centreRelativeRow = row - 4.5\n      const centreRelativeCol = col - 4.0\n      return (Math.abs(centreRelativeRow) + Math.abs(centreRelativeCol) <= 5)\n    })\n\nexport const allVerticals: Coords[] =\n  range(9).flatMap(row => range(10).map(col => ({ row, col })))\n    .filter(({ row, col }) => {\n      const centreRelativeRow = row - 4.0\n      const centreRelativeCol = col - 4.5\n      return (Math.abs(centreRelativeRow) + Math.abs(centreRelativeCol) <= 5)\n    })\n\nexport const allJunctions: Coords[] =\n  allHorizontals.filter(h => allVerticals.some(v => sameCoords(h, v)))\n    .filter(j => allHorizontals.some(h => sameCoords(h, goLeft(j))))\n\nexport const allLocations: Coords[] =\n  allHorizontals.concat(allVerticals.filter(v => !allHorizontals.some(h => sameCoords(v, h))))\n","export enum RunType {\n  Horizontal,\n  Vertical\n}\n","import { Coords } from \"types\"\nimport { Piece } from \"./piece\"\n\nconst twoSidedPiecesMap = new Map<string, { lineSegments: string, polyLines: string }>([\n  [\"I\", { lineSegments: \"V00 V10 V20 V30 I10 I20 I30\", polyLines: \"0,0 1,0 2,0 3,0 4,0\" }],\n  [\"O\", { lineSegments: \"H00 V01 H10 V00\", polyLines: \"0,0 0,1 1,1 1,0 0,0\" }],\n  [\"T\", { lineSegments: \"H00 H01 V01 V11 I11\", polyLines: \"0,0 0,1 1,1 2,1|0,2 0,1 1,1 2,1\" }],\n  [\"U\", { lineSegments: \"V00 H10 H11 V02 I11\", polyLines: \"0,0 1,0 1,1 1,2 0,2\" }],\n  [\"V\", { lineSegments: \"V00 V10 H20 H21 I10 I21\", polyLines: \"0,0 1,0 2,0 2,1 2,2\" }],\n  [\"W\", { lineSegments: \"V00 H10 V11 H21\", polyLines: \"0,0 1,0 1,1 2,1 2,2\" }],\n  [\"X\", { lineSegments: \"V01 V11 H10 H11\", polyLines: \"1,0 1,1 0,1|0,1 1,1 1,2|1,2 1,1 2,1|2,1 1,1 1,0\" }]\n])\n\nconst oneSidedPiecesMap = new Map<string, { lineSegments: string, polyLines: string }>([\n  [\"F\", { lineSegments: \"H00 V00 H10 V10\", polyLines: \"0,1 0,0 1,0 1,1|1,1 1,0 2,0\" }],\n  [\"H\", { lineSegments: \"V00 V10 H10 V11\", polyLines: \"0,0 1,0 1,1 2,1|2,0 1,0 1,1 2,1\" }],\n  [\"J\", { lineSegments: \"V10 H20 V11 V01 I11\", polyLines: \"1,0 2,0 2,1 1,1 0,1\" }],\n  [\"L\", { lineSegments: \"V00 V10 V20 H30 I10 I20\", polyLines: \"0,0 1,0 2,0 3,0 3,1\" }],\n  [\"N\", { lineSegments: \"V20 H20 V01 V11 I11\", polyLines: \"3,0 2,0 2,1 1,1 0,1\" }],\n  [\"P\", { lineSegments: \"H00 V01 H10 V10\", polyLines: \"0,0 0,1 1,1 1,0 2,0\" }],\n  [\"R\", { lineSegments: \"H10 V11 V01 H01\", polyLines: \"1,0 1,1 2,1|1,0 1,1 0,1 0,2\" }],\n  [\"Y\", { lineSegments: \"H10 V01 V11 V21 I21\", polyLines: \"1,0 1,1 0,1|1,0 1,1 2,1 3,1\" }],\n  [\"Z\", { lineSegments: \"H00 V01 V11 H21 I11\", polyLines: \"0,0 0,1 1,1 2,1 2,2\" }]\n])\n\nconst parsePiece = (\n  label: string,\n  lineSegmentDescriptions: string,\n  polyLineDescriptions: string\n): Piece => {\n  const horizontals: Coords[] = []\n  const verticals: Coords[] = []\n  const junctions: Coords[] = []\n  const polyLines = parsePolyLineDescriptions(polyLineDescriptions)\n\n  const bits = lineSegmentDescriptions.split(/\\s/).map(s => s.trim()).filter(Boolean)\n\n  for (const bit of bits) {\n    const type = bit[0]\n    const row = Number(bit[1])\n    const col = Number(bit[2])\n    const coords = { row, col }\n    switch (type) {\n      case \"H\":\n        horizontals.push(coords)\n        break\n      case \"V\":\n        verticals.push(coords)\n        break\n      case \"I\":\n        junctions.push(coords)\n        break\n    }\n  }\n\n  return { label, horizontals, verticals, junctions, polyLines: polyLines }\n}\n\nconst parsePolyLineDescriptions = (polyLineDescriptions: string): Coords[][] => {\n  return polyLineDescriptions\n    .split(\"|\")\n    .map(s => s.trim())\n    .filter(Boolean)\n    .map(parsePolyLineDescription)\n}\n\nconst parsePolyLineDescription = (polyLineDescription: string): Coords[] => {\n  return polyLineDescription\n    .split(/\\s/)\n    .map(s => s.trim())\n    .filter(Boolean)\n    .map(coordsString => {\n      const row = Number(coordsString[0])\n      const col = Number(coordsString[2])\n      return { row, col }\n    })\n}\n\nexport const twoSidedPieces =\n  Array.from(twoSidedPiecesMap)\n    .map(([label, { lineSegments, polyLines }]) =>\n      parsePiece(label, lineSegments, polyLines))\n\nexport const oneSidedPieces =\n  Array.from(oneSidedPiecesMap)\n    .map(([label, { lineSegments, polyLines }]) =>\n      parsePiece(label, lineSegments, polyLines))\n","import { Coords, coordsComparer } from \"types\"\nimport { maxBy } from \"utils\"\nimport { Orientation, rotateCW as rotateOrientationCW } from \"./orientation\"\n\nexport type Variation = {\n  orientation: Orientation,\n  reflected: boolean,\n  horizontals: Coords[],\n  verticals: Coords[],\n  junctions: Coords[]\n  polyLines: Coords[][]\n}\n\nexport const getDimensions = (variation: Variation): { width: number, height: number } => {\n  const width = variation.horizontals.length ? maxBy(variation.horizontals, h => h.col) + 1 : 0\n  const height = variation.verticals.length ? maxBy(variation.verticals, v => v.row) + 1 : 0\n  return { width, height }\n}\n\nexport const reflect = (variation: Variation): Variation => {\n  const { width } = getDimensions(variation)\n  const newHorizontals = variation.horizontals.map(c => ({ row: c.row, col: width - c.col - 1 }))\n  const newVerticals = variation.verticals.map(c => ({ row: c.row, col: width - c.col }))\n  const newJunctions = variation.junctions.map(c => ({ row: c.row, col: width - c.col }))\n  const newPolyLines = variation.polyLines.map(polyLine => polyLine.map(c => ({ row: c.row, col: width - c.col })))\n\n  return {\n    orientation: variation.orientation,\n    reflected: !variation.reflected,\n    horizontals: newHorizontals,\n    verticals: newVerticals,\n    junctions: newJunctions,\n    polyLines: newPolyLines\n  }\n}\n\nexport const rotateCW = (variation: Variation): Variation => {\n  const { height } = getDimensions(variation)\n  const newHorizontals = variation.verticals.map(c => ({ row: c.col, col: height - c.row - 1 }))\n  const newVerticals = variation.horizontals.map(c => ({ row: c.col, col: height - c.row }))\n  const newJunctions = variation.junctions.map(c => ({ row: c.col, col: height - c.row }))\n  const newPolyLines = variation.polyLines.map(polyLine => polyLine.map(c => ({ row: c.col, col: height - c.row })))\n\n  return {\n    orientation: rotateOrientationCW(variation.orientation),\n    reflected: variation.reflected,\n    horizontals: newHorizontals,\n    verticals: newVerticals,\n    junctions: newJunctions,\n    polyLines: newPolyLines\n  }\n}\n\nexport const normalisedRepresentation = (variation: Variation): string => {\n  const sortedHorizontals = variation.horizontals.slice().sort(coordsComparer)\n  const sortedVerticals = variation.verticals.slice().sort(coordsComparer)\n  const hs = sortedHorizontals.map(coords => `H${coords.row}:${coords.col}`)\n  const vs = sortedVerticals.map(coords => `V${coords.row}:${coords.col}`)\n  return hs.concat(vs).join(\"-\")\n}\n","import { Orientation } from \"./orientation\"\nimport { Piece } from \"./piece\"\nimport { twoSidedPieces, oneSidedPieces } from \"./pieces\"\nimport { PieceWithVariations } from \"./piece-with-variations\"\nimport { normalisedRepresentation, reflect, rotateCW, Variation } from \"./variation\"\n\nconst makeVariations = (piece: Piece, wantReflected: boolean): PieceWithVariations => {\n  const baseVariation = {\n    orientation: Orientation.North,\n    reflected: false,\n    horizontals: piece.horizontals,\n    verticals: piece.verticals,\n    junctions: piece.junctions,\n    polyLines: piece.polyLines\n  }\n\n  const north = wantReflected ? reflect(baseVariation) : baseVariation\n  const east = rotateCW(north)\n  const south = rotateCW(east)\n  const west = rotateCW(south)\n\n  const allVariations = [north, east, south, west]\n\n  const representations = new Set<string>()\n  const uniqueVariations: Variation[] = []\n  allVariations.forEach(variation => {\n    const representation = normalisedRepresentation(variation)\n    if (!representations.has(representation)) {\n      representations.add(representation)\n      uniqueVariations.push(variation)\n    }\n  })\n\n  return { label: piece.label, variations: uniqueVariations }\n}\n\nconst makeUnreflectedVariations = (piece: Piece) => makeVariations(piece, false)\nconst makeReflectedVariations = (piece: Piece) => makeVariations(piece, true)\n\nexport const piecesWithVariations: PieceWithVariations[] =\n  twoSidedPieces.map(makeUnreflectedVariations)\n    .concat(oneSidedPieces.map(makeUnreflectedVariations))\n    .concat(oneSidedPieces.map(makeReflectedVariations))\n","import { Orientation } from \"./orientation\"\nimport { Drawing } from \"./drawing\"\nimport { InternalRow } from \"./internal-row\"\nimport { piecesWithVariations } from \"./pieces-with-variations\"\n\nexport const Thumbnail = () => {\n  const solutionInternalRows = makeSolution()\n  return (\n    <Drawing\n      puzzle={{}}\n      solutionInternalRows={solutionInternalRows}\n      drawingOptions={{}}\n    />\n  )\n}\n\nexport const makeSolution = (): InternalRow[] => {\n  return [\n    makeSolutionInternalRow(\"I\", Orientation.North, false, 3, 2),\n    makeSolutionInternalRow(\"O\", Orientation.North, false, 4, 8),\n    makeSolutionInternalRow(\"T\", Orientation.North, false, 3, 5),\n    makeSolutionInternalRow(\"U\", Orientation.West, false, 2, 6),\n    makeSolutionInternalRow(\"V\", Orientation.South, false, 1, 4),\n    makeSolutionInternalRow(\"W\", Orientation.East, false, 2, 1),\n    makeSolutionInternalRow(\"X\", Orientation.North, false, 5, 2),\n\n    makeSolutionInternalRow(\"F\", Orientation.West, false, 5, 6),\n    makeSolutionInternalRow(\"H\", Orientation.South, false, 2, 4),\n    makeSolutionInternalRow(\"J\", Orientation.South, false, 0, 4),\n    makeSolutionInternalRow(\"L\", Orientation.North, false, 6, 4),\n    makeSolutionInternalRow(\"N\", Orientation.East, false, 3, 3),\n    makeSolutionInternalRow(\"P\", Orientation.North, false, 3, 7),\n    makeSolutionInternalRow(\"R\", Orientation.East, false, 3, 2),\n    makeSolutionInternalRow(\"Y\", Orientation.East, false, 1, 3),\n    makeSolutionInternalRow(\"Z\", Orientation.East, false, 6, 5),\n\n    makeSolutionInternalRow(\"F\", Orientation.South, true, 4, 1),\n    makeSolutionInternalRow(\"H\", Orientation.West, true, 7, 2),\n    makeSolutionInternalRow(\"J\", Orientation.East, true, 4, 0),\n    makeSolutionInternalRow(\"L\", Orientation.West, true, 5, 5),\n    makeSolutionInternalRow(\"N\", Orientation.North, true, 4, 5),\n    makeSolutionInternalRow(\"P\", Orientation.South, true, 5, 4),\n    makeSolutionInternalRow(\"R\", Orientation.East, true, 7, 4),\n    makeSolutionInternalRow(\"Y\", Orientation.West, true, 4, 2),\n    makeSolutionInternalRow(\"Z\", Orientation.North, true, 1, 2),\n  ]\n}\n\nconst makeSolutionInternalRow = (\n  label: string,\n  orientation: Orientation,\n  reflected: boolean,\n  row: number,\n  col: number\n): InternalRow => {\n\n  for (const pwv of piecesWithVariations) {\n    if (pwv.label === label) {\n      const variation = pwv.variations.find(v => v.orientation === orientation && v.reflected === reflected)\n      if (variation) {\n        const location = { row, col }\n        return { label, variation, location }\n      }\n    }\n  }\n  throw new Error(\"[makeSolutionInternalRow] failed to find variation\")\n}\n","import { Coords, DrawingProps, sameCoords } from \"types\"\nimport { first, last, range } from \"utils\"\nimport { InternalRow } from \"./internal-row\"\nimport { Puzzle } from \"./puzzle\"\nimport { allHorizontals, allVerticals } from \"./locations\"\n\nconst VIEWBOX_WIDTH = 100\nconst VIEWBOX_HEIGHT = 100\n\nconst GRID_LINE_FULL_THICKNESS = 1\nconst TETRASTICK_FULL_THICKNESS = GRID_LINE_FULL_THICKNESS * 1.5;\nconst TETRASTICK_HALF_THICKNESS = TETRASTICK_FULL_THICKNESS / 2;\n\nconst GRID_LINE_COLOUR = \"#80808080\"\n\nconst SQUARE_WIDTH = (VIEWBOX_WIDTH - TETRASTICK_FULL_THICKNESS) / 9\nconst SQUARE_HEIGHT = (VIEWBOX_HEIGHT - TETRASTICK_FULL_THICKNESS) / 9\n\nconst calculateX = (col: number) => col * SQUARE_WIDTH + TETRASTICK_HALF_THICKNESS\nconst calculateY = (row: number) => row * SQUARE_HEIGHT + TETRASTICK_HALF_THICKNESS\n\nconst calculatePoint = (location: Coords, coords: Coords) =>\n  [calculateX(location.col + coords.col), calculateY(location.row + coords.row)]\n\nconst tetraStickColours = new Map<string, string>([\n  [\"F\", \"#FF7366\"],\n  [\"H\", \"#00E61A\"],\n  [\"I\", \"#660066\"],\n  [\"J\", \"#E6E6FF\"],\n  [\"L\", \"#596673\"],\n  [\"N\", \"#FFFF00\"],\n  [\"O\", \"#CCCC1A\"],\n  [\"P\", \"#994D33\"],\n  [\"R\", \"#9926B2\"],\n  [\"T\", \"#3300B2\"],\n  [\"U\", \"#FF2699\"],\n  [\"V\", \"#00FFFF\"],\n  [\"W\", \"#CCFF00\"],\n  [\"X\", \"#E60000\"],\n  [\"Y\", \"#6659E6\"],\n  [\"Z\", \"#008000\"]\n])\n\nexport const Drawing: React.FC<DrawingProps<Puzzle, InternalRow>> = ({\n  solutionInternalRows,\n}) => {\n\n  const drawHorizontalGridLines = (): JSX.Element[] => {\n    return allHorizontals.map(coords => {\n      const { row, col } = coords\n      const x1 = calculateX(col) + TETRASTICK_FULL_THICKNESS\n      const x2 = calculateX(col + 1) - TETRASTICK_FULL_THICKNESS\n      const y = calculateY(row)\n\n      return (\n        <line\n          key={`horizontal-grid-line-${row}-${col}`}\n          x1={x1}\n          y1={y}\n          x2={x2}\n          y2={y}\n          strokeWidth={GRID_LINE_FULL_THICKNESS}\n          stroke={GRID_LINE_COLOUR}\n        />\n      )\n    })\n  }\n\n  const drawVerticalGridLines = (): JSX.Element[] => {\n    return allVerticals.map(coords => {\n      const { row, col } = coords\n      const x = calculateX(col)\n      const y1 = calculateY(row) + TETRASTICK_FULL_THICKNESS\n      const y2 = calculateY(row + 1) - TETRASTICK_FULL_THICKNESS\n      return (\n        <line\n          key={`vertical-grid-line-${row}-${col}`}\n          x1={x}\n          y1={y1}\n          x2={x}\n          y2={y2}\n          strokeWidth={GRID_LINE_FULL_THICKNESS}\n          stroke={GRID_LINE_COLOUR}\n        />\n      )\n    })\n  }\n\n  const drawTetraSticks = (): JSX.Element[] => {\n    return solutionInternalRows.flatMap(drawTetraStick)\n  }\n\n  const LINE_END_MULTIPLIER = 3\n  const ROUNDED_CORNER_MULTIPLIER = 4\n\n  const insetPoint = (multiplier: number) => (coords1: Coords, coords2: Coords, point: number[]): number[] => {\n    const rowDiff = coords2.row - coords1.row\n    const colDiff = coords2.col - coords1.col\n    const verticalInset = TETRASTICK_HALF_THICKNESS * multiplier\n    const horizontalInset = TETRASTICK_HALF_THICKNESS * multiplier\n    const [x, y] = point\n    if (rowDiff === 1 && colDiff === 0) return [x, y + verticalInset]\n    if (rowDiff === -1 && colDiff === 0) return [x, y - verticalInset]\n    if (rowDiff === 0 && colDiff === 1) return [x + horizontalInset, y]\n    if (rowDiff === 0 && colDiff === -1) return [x - horizontalInset, y]\n    return point\n  }\n\n  const insetLineStart = insetPoint(LINE_END_MULTIPLIER)\n  const insetLineEnd = insetPoint(LINE_END_MULTIPLIER)\n  const insetRoundedCornerStart = insetPoint(ROUNDED_CORNER_MULTIPLIER)\n  const insetRoundedCornerEnd = insetPoint(ROUNDED_CORNER_MULTIPLIER)\n\n  // https://stackoverflow.com/a/40444735\n  // const angle = ([a,b],[c,d],[e,f]) => (Math.atan2(f-d,e-c)-Math.atan2(b-d,a-c)+3*pi)%(2*pi)-pi;\n  // const sweepFl = (S,V,E) => angle(E,S,V) > 0 ? 0 : 1;\n  const angle = (S: Coords, V: Coords, E: Coords) => {\n    const { row: b, col: a } = E\n    const { row: d, col: c } = S\n    const { row: f, col: e } = V\n    return (Math.atan2(f - d, e - c) - Math.atan2(b - d, a - c) + 3 * Math.PI) % (2 * Math.PI) - Math.PI\n  }\n\n  const moveTo = (point: number[]): string => {\n    const [x, y] = point\n    return `M ${x},${y}`\n  }\n\n  const lineTo = (point: number[]): string => {\n    const [x, y] = point\n    return `L ${x},${y}`\n  }\n\n  const roundedCornerTo = (S: Coords, V: Coords, E: Coords, point: number[]): string => {\n    const r = TETRASTICK_HALF_THICKNESS * ROUNDED_CORNER_MULTIPLIER\n    const largeArcFlag = 0\n    const sweepFlag = angle(S, V, E) < 0 ? 1 : 0\n    const [x, y] = point\n    return `A ${r} ${r} 0 ${largeArcFlag} ${sweepFlag} ${x},${y}`\n  }\n\n  const drawTetraStick = (internalRow: InternalRow): JSX.Element[] => {\n\n    const { label, variation, location } = internalRow\n    const colour = tetraStickColours.get(label)\n\n    const pathData: string[] = []\n\n    for (const polyLine of variation.polyLines) {\n      const isClosed = sameCoords(first(polyLine), last(polyLine))\n      const pathCommands: string[] = []\n\n      if (isClosed) {\n        const roundedCornerStart = insetRoundedCornerStart(polyLine[0], polyLine[1], calculatePoint(location, polyLine[0]))\n        pathCommands.push(moveTo(roundedCornerStart))\n      } else {\n        var lineStart = insetLineStart(polyLine[0], polyLine[1], calculatePoint(location, polyLine[0]))\n        pathCommands.push(moveTo(lineStart))\n      }\n\n      const indices = range(polyLine.length).slice(1).slice(0, -1)\n      for (const index of indices) {\n        const coords = polyLine[index]\n        const coordsPrev = polyLine[index - 1]\n        const coordsNext = polyLine[index + 1]\n        const point = calculatePoint(location, coords)\n\n        if (coordsPrev.row === coordsNext.row || coordsPrev.col === coordsNext.col) {\n          pathCommands.push(lineTo(point))\n        } else {\n          const roundedCornerStart = insetRoundedCornerStart(coords, coordsPrev, point)\n          pathCommands.push(lineTo(roundedCornerStart))\n\n          const roundedCornerEnd = insetRoundedCornerEnd(coords, coordsNext, point)\n          pathCommands.push(roundedCornerTo(coordsPrev, coords, coordsNext, roundedCornerEnd))\n        }\n      }\n\n      if (isClosed) {\n        const coords = polyLine[0]\n        const coordsPrev = polyLine.slice(-2)[0] // not -1 because -1 is the same coords as point 0\n        const coordsNext = polyLine[1]\n        const point = calculatePoint(location, coords)\n\n        const roundedCornerStart = insetRoundedCornerStart(coords, coordsPrev, point)\n        pathCommands.push(lineTo(roundedCornerStart))\n\n        const firstPoint = insetRoundedCornerStart(polyLine[0], polyLine[1], calculatePoint(location, coords))\n        pathCommands.push(roundedCornerTo(coordsPrev, coords, coordsNext, firstPoint))\n      } else {\n        const lineEnd = insetLineEnd(polyLine.slice(-1)[0], polyLine.slice(-2)[0], calculatePoint(location, polyLine.slice(-1)[0]))\n        pathCommands.push(lineTo(lineEnd))\n      }\n\n      pathData.push(pathCommands.join(\" \"))\n    }\n\n    const elements: JSX.Element[] = []\n\n    pathData.forEach((d, index) => {\n      const path = (\n        <path\n          key={`tetrastick-${label}-${variation.orientation}-${variation.reflected}-${index}`}\n          d={d}\n          stroke={colour}\n          strokeWidth={TETRASTICK_FULL_THICKNESS}\n          strokeLinecap=\"round\"\n          fill=\"none\"\n        />\n      )\n      elements.push(path)\n    })\n\n    return elements\n  }\n\n  return (\n    <svg viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}>\n      {drawHorizontalGridLines()}\n      {drawVerticalGridLines()}\n      {drawTetraSticks()}\n    </svg>\n  )\n}\n","import { IDemo, sameCoords } from \"types\"\nimport { range } from \"utils\"\nimport { InternalRow } from \"./internal-row\"\nimport { allHorizontals, allJunctions, allVerticals } from \"./locations\"\nimport { piecesWithVariations } from \"./pieces-with-variations\"\nimport { Puzzle } from \"./puzzle\"\nimport { makeSolution as makeThumbnailSolution } from \"./thumbnail\"\n\nexport class Demo implements IDemo<Puzzle, InternalRow> {\n\n  buildInternalRows(_puzzle: Puzzle, checkForCancellation: () => boolean): InternalRow[] {\n    return this.allPossiblePiecePlacements(5).filter(this.isValidPiecePlacement)\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const pieceColumns = this.makePieceColumns(internalRow)\n    const horizontalsColumns = this.makeHorizontalsColumns(internalRow)\n    const vertialsColumns = this.makeVerticalsColumns(internalRow)\n    const junctionsColumns = this.makeJunctionsColumns(internalRow)\n    return pieceColumns\n      .concat(horizontalsColumns)\n      .concat(vertialsColumns)\n      .concat(junctionsColumns)\n  }\n\n  getNumPrimaryColumns(_puzzle: Puzzle): number | undefined {\n    const numPieces = piecesWithVariations.length\n    const numHorizontals = allHorizontals.length\n    const numVerticals = allVerticals.length\n    return numPieces + numHorizontals + numVerticals\n  }\n\n  isValidPiecePlacement(internalRow: InternalRow): boolean {\n    const { location } = internalRow\n\n    for (const horizontal of internalRow.variation.horizontals) {\n      const row = location.row + horizontal.row\n      const col = location.col + horizontal.col\n      const coords = { row, col }\n      if (!allHorizontals.some(h => sameCoords(h, coords))) return false\n    }\n\n    for (const vertical of internalRow.variation.verticals) {\n      const row = location.row + vertical.row\n      const col = location.col + vertical.col\n      const coords = { row, col }\n      if (!allVerticals.some(v => sameCoords(v, coords))) return false\n    }\n\n    return true\n  }\n\n  allPossiblePiecePlacements(numFixedPieces: number): InternalRow[] {\n    const internalRows: InternalRow[] = []\n    const fixedInternalRows = makeThumbnailSolution().slice(0, numFixedPieces)\n\n    for (const pieceWithVariations of piecesWithVariations) {\n      const fixedInternalRow = fixedInternalRows.find(fir => (\n        fir.label === pieceWithVariations.label &&\n        fir.variation.reflected === pieceWithVariations.variations[0].reflected\n      ))\n\n      if (fixedInternalRow) {\n        internalRows.push(fixedInternalRow)\n        continue\n      }\n\n      const allLocationsInBoundingSquare =\n        range(9).flatMap(row =>\n          range(9).map(col =>\n            ({ row, col })))\n\n      for (const variation of pieceWithVariations.variations) {\n        for (const location of allLocationsInBoundingSquare) {\n          const label = pieceWithVariations.label\n          const internalRow = { label, variation, location }\n          internalRows.push(internalRow)\n        }\n      }\n    }\n\n    return internalRows\n  }\n\n  makePieceColumns(internalRow: InternalRow): number[] {\n    const columns = Array(piecesWithVariations.length).fill(0)\n    const index = piecesWithVariations.findIndex(pwv => (\n      pwv.label === internalRow.label &&\n      pwv.variations[0].reflected === internalRow.variation.reflected\n    ))\n    columns[index] = 1\n    return columns\n  }\n\n  makeHorizontalsColumns(internalRow: InternalRow): number[] {\n    const { location } = internalRow\n    const columns = Array(allHorizontals.length).fill(0)\n    for (const horizontal of internalRow.variation.horizontals) {\n      const row = location.row + horizontal.row\n      const col = location.col + horizontal.col\n      const coords = { row, col }\n      const index = allHorizontals.findIndex(h => sameCoords(h, coords))\n      if (index >= 0) {\n        columns[index] = 1\n      }\n    }\n    return columns\n  }\n\n  makeVerticalsColumns(internalRow: InternalRow): number[] {\n    const { location } = internalRow\n    const columns = Array(allVerticals.length).fill(0)\n    for (const vertical of internalRow.variation.verticals) {\n      const row = location.row + vertical.row\n      const col = location.col + vertical.col\n      const coords = { row, col }\n      const index = allVerticals.findIndex(v => sameCoords(v, coords))\n      if (index >= 0) {\n        columns[index] = 1\n      }\n    }\n    return columns\n  }\n\n  makeJunctionsColumns(internalRow: InternalRow): number[] {\n    const { location } = internalRow\n    const columns = Array(allJunctions.length).fill(0)\n    for (const junction of internalRow.variation.junctions) {\n      const row = location.row + junction.row\n      const col = location.col + junction.col\n      const coords = { row, col }\n      const index = allJunctions.findIndex(j => sameCoords(j, coords))\n      if (index >= 0) {\n        columns[index] = 1\n      }\n    }\n    return columns\n  }\n}\n","import { Coords, goDown, goLeft, goRight, goUp, IDemo } from \"types\"\nimport { except, range } from \"utils\"\nimport { InternalRow } from \"./internal-row\"\nimport { Puzzle } from \"./puzzle\"\n\nexport class Demo implements IDemo<Puzzle, InternalRow> {\n\n  buildInternalRows(puzzle: Puzzle, checkForCancellation: () => boolean): InternalRow[] {\n    const internalRows: InternalRow[] = []\n\n    for (const room of puzzle.rooms) {\n      for (const initialValue of room.initialValues) {\n        const { cell, value } = initialValue\n        const isInitialValue = true\n        const internalRow = { puzzle, cell, value, isInitialValue, room }\n        internalRows.push(internalRow)\n      }\n\n      const givenCells = room.initialValues.map(({ cell }) => cell)\n      const givenValues = room.initialValues.map(({ value }) => value)\n      const cellsToSolve = except(room.cells, givenCells)\n      const values = range(room.cells.length).map(n => n + 1)\n      const valuesToSolve = except(values, givenValues)\n\n      for (const cell of cellsToSolve) {\n        for (const value of valuesToSolve) {\n          const isInitialValue = false\n          const internalRow = { puzzle, cell, value, isInitialValue, room }\n          internalRows.push(internalRow)\n        }\n      }\n    }\n\n    return internalRows\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const locationColumns = this.makeLocationColumns(internalRow)\n    const roomColumns = this.makeRoomColumns(internalRow)\n    const rippleColumns = this.makeRippleColumns(internalRow)\n    return locationColumns\n      .concat(roomColumns)\n      .concat(rippleColumns)\n  }\n\n  getNumPrimaryColumns(puzzle: Puzzle): number | undefined {\n    const { size } = puzzle\n    return size * size * 2\n  }\n\n  makeLocationColumns(internalRow: InternalRow): number[] {\n    const size = internalRow.puzzle.size\n    const columns = Array(size * size).fill(0)\n    const { row, col } = internalRow.cell\n    const index = row * size + col\n    columns[index] = 1\n    return columns\n  }\n\n  makeRoomColumns(internalRow: InternalRow): number[] {\n    const size = internalRow.puzzle.size\n    const columns = Array(size * size).fill(0)\n    const index = internalRow.room.startIndex + internalRow.value - 1\n    columns[index] = 1\n    return columns\n  }\n\n  makeRippleColumns(internalRow: InternalRow): number[] {\n    const { size, maxValue } = internalRow.puzzle\n    const arrayOfArrays: number[][] = range(maxValue * 4).map(_ => Array(size * size).fill(0))\n    const baseIndex = (internalRow.value - 1) * 4\n\n    const setRippleColumnBits = (baseIndexOffset: number, transformCoords: (coords: Coords) => Coords): void => {\n      const rippleCells = this.getRippleCells(internalRow, transformCoords)\n      const array = arrayOfArrays[baseIndex + baseIndexOffset]\n      for (const cell of rippleCells) {\n        const index = cell.row * size + cell.col\n        array[index] = 1\n      }\n    }\n\n    setRippleColumnBits(0, goUp)\n    setRippleColumnBits(1, goDown)\n    setRippleColumnBits(2, goLeft)\n    setRippleColumnBits(3, goRight)\n\n    return arrayOfArrays.flat()\n  }\n\n  getRippleCells(\n    internalRow: InternalRow,\n    transformCoords: (coords: Coords) => Coords\n  ): Coords[] {\n    const size = internalRow.puzzle.size\n    const { cell, value } = internalRow\n    const cells: Coords[] = []\n\n    for (const _ of range(value)) {\n      const { row, col } = transformCoords(cell)\n      if (row >= 0 && row < size && col >= 0 && col < size) {\n        cells.push({ row, col })\n      }\n    }\n\n    return cells\n  }\n}\n","import { Coords, sameCoords, goUp, goDown, goLeft, goRight } from \"types\"\nimport { range } from \"utils\"\nimport { ColourPair } from \"./colour-pair\"\nimport { Puzzle } from \"./puzzle\"\n\nexport const findPaths = (puzzle: Puzzle, colourPair: ColourPair): Coords[][] => {\n  const start = colourPair.start\n  const goal = colourPair.end\n  const currentPath = [start]\n  const paths: Coords[][] = []\n  const maxDirectionChanges = puzzle.colourPairs.length\n\n  findPathsInternal(puzzle, currentPath, paths, start, goal, maxDirectionChanges)\n\n  return paths\n}\n\n// Inspired by this: https://stackoverflow.com/a/22464491\nconst findPathsInternal = (\n  puzzle: Puzzle,\n  currentPath: Coords[],\n  paths: Coords[][],\n  node: Coords,\n  goal: Coords,\n  maxDirectionChanges: number\n): void => {\n  for (const nextNode of neighbours(puzzle, node, goal)) {\n    if (sameCoords(nextNode, goal)) {\n      const path = [...currentPath, nextNode]\n      if (countDirectionChanges(path) <= maxDirectionChanges) {\n        paths.push(path)\n      }\n    } else {\n      const index = currentPath.findIndex(p => sameCoords(p, nextNode))\n      if (index < 0) {\n        currentPath.push(nextNode)\n        if (countDirectionChanges(currentPath) <= maxDirectionChanges) {\n          findPathsInternal(puzzle, currentPath, paths, nextNode, goal, maxDirectionChanges)\n        }\n        currentPath.pop()\n      }\n    }\n  }\n}\n\nconst neighbours = (puzzle: Puzzle, node: Coords, goal: Coords): Coords[] => {\n\n  const dots = puzzle.colourPairs.flatMap(cp => [cp.start, cp.end])\n  const isDot = (n: Coords) => dots.findIndex(d => sameCoords(d, n)) >= 0\n\n  const ns = [\n    goUp(node),\n    goDown(node),\n    goLeft(node),\n    goRight(node)\n  ]\n\n  const isWithinPuzzle = (n: Coords) => (\n    n.row >= 0 && n.row < puzzle.size &&\n    n.col >= 0 && n.col < puzzle.size\n  )\n\n  const isEmptyLocationOrGoal = (n: Coords) =>\n    !isDot(n) || sameCoords(n, goal)\n\n  return ns\n    .filter(isWithinPuzzle)\n    .filter(isEmptyLocationOrGoal)\n}\n\nconst countDirectionChanges = (path: Coords[]): number => {\n  if (path.length < 3) return 0\n  let count = 0\n  for (const index of range(path.length).slice(1).slice(0, -1)) {\n    const p1 = path[index - 1]\n    const p3 = path[index + 1]\n    const rowDiff = Math.abs(p3.row - p1.row)\n    const colDiff = Math.abs(p3.col - p1.col)\n    if (rowDiff !== 0 && colDiff !== 0) count++\n  }\n  return count\n}\n","import { IDemo } from \"types\"\nimport { InternalRow } from \"./internal-row\"\nimport { Puzzle } from \"./puzzle\"\nimport { findPaths } from \"./path-finder\"\n\nexport class Demo implements IDemo<Puzzle, InternalRow> {\n\n  buildInternalRows(puzzle: Puzzle, checkForCancellation: () => boolean): InternalRow[] {\n    const internalRows: InternalRow[] = []\n    for (const colourPair of puzzle.colourPairs) {\n      const paths = findPaths(puzzle, colourPair)\n      for (const coordsList of paths) {\n        const internalRow = { puzzle, colourPair, coordsList }\n        internalRows.push(internalRow)\n      }\n    }\n    return internalRows\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const size = internalRow.puzzle.size\n    const columns = Array(size * size).fill(0)\n    for (const coords of internalRow.coordsList) {\n      const index = coords.row * size + coords.col\n      columns[index] = 1\n    }\n    return columns\n  }\n\n  getNumPrimaryColumns(puzzle: Puzzle): number | undefined {\n    return undefined\n  }\n}\n","import { sameCoordsList } from \"types\"\nimport { Coords } from \"types\"\nimport { RunType } from \"./run-type\"\n\nexport type Run = {\n  runType: RunType,\n  coordsList: Coords[],\n  sum: number\n}\n\nexport const sameRun = (run1: Run, run2: Run): boolean => {\n  return (\n    run1.runType === run2.runType &&\n    run1.sum === run2.sum &&\n    sameCoordsList(run1.coordsList, run2.coordsList)\n  )\n}\n","// https://www.chadgolden.com/blog/finding-all-the-permutations-of-an-array-in-c-sharp\n\nexport const doPermute = (nums: number[]): number[][] => {\n  const permutations: number[][] = []\n  doPermuteInternal(nums, 0, nums.length - 1, permutations)\n  return permutations\n}\n\nconst doPermuteInternal = (nums: number[], start: number, end: number, list: number[][]): void => {\n  if (start === end) {\n    list.push(nums.slice())\n  } else {\n    for (let i = start; i <= end; i++) {\n      swap(nums, start, i)\n      doPermuteInternal(nums, start + 1, end, list)\n      swap(nums, start, i)\n    }\n  }\n}\n\nconst swap = (nums: number[], index1: number, index2: number): void => {\n  const temp = nums[index1]\n  nums[index1] = nums[index2]\n  nums[index2] = temp\n}\n","export enum RunGroupType {\n  Horizontal,\n  Vertical\n}\n","import { Coords, IDemo, sameCoords } from \"types\"\nimport { except, range, sum } from \"utils\"\nimport { InternalRow } from \"./internal-row\"\nimport { Run, sameRun } from \"./run\"\nimport { Puzzle } from \"./puzzle\"\nimport { RunType } from \"./run-type\"\nimport { doPermute } from \"./permutations\"\n\nconst DIGITS = range(9).map(n => n + 1)\n\nexport class Demo implements IDemo<Puzzle, InternalRow> {\n\n  buildInternalRows(puzzle: Puzzle, checkForCancellation: () => boolean): InternalRow[] {\n    const internalRows: InternalRow[] = []\n\n    const createInternalRowsFor = (runs: Run[]): void => {\n      for (const run of runs) {\n        for (const setOfValues of this.findSetsOfValues(run)) {\n          for (const values of doPermute(setOfValues)) {\n            const internalRow = { puzzle, run, values }\n            internalRows.push(internalRow)\n          }\n        }\n      }\n    }\n\n    createInternalRowsFor(puzzle.horizontalRuns)\n    createInternalRowsFor(puzzle.verticalRuns)\n\n    return internalRows\n  }\n\n  // Return sets of values where each set of values:\n  // - has length run.CoordsList.Length\n  // - sums to run.Sum\n  // - contains only values 1..9\n  // - does not have any duplicated values\n  // e.g. for run length 3 and sum 10, valid sets of values would be [1,4,5], [2,3,5], [1,3,6], etc\n  findSetsOfValues(run: Run): number[][] {\n    const setsOfValues: number[][] = []\n\n    const helper = (n: number, useds: number[][], setOfValues: number[]): void => {\n      const remainingDigits = except(DIGITS, useds.flat())\n      const used: number[] = []\n      useds.push(used)\n      for (const digit of remainingDigits) {\n        setOfValues.push(digit)\n        used.push(digit)\n        if (n > 1) {\n          helper(n - 1, useds, setOfValues)\n        } else {\n          if (sum(setOfValues) === run.sum) {\n            setsOfValues.push(setOfValues.slice())\n          }\n        }\n        setOfValues.pop()\n      }\n      useds.pop()\n    }\n\n    const runLength = run.coordsList.length\n    helper(runLength, [], []);\n\n    return setsOfValues\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const { puzzle, run, values } = internalRow\n    const horizontalRunColumns = this.makeHorizontalRunColumns(puzzle, run)\n    const verticalRunColumns = this.makeVerticalRunColumns(puzzle, run)\n    const horizontalRunValueColumns = this.makeHorizontalRunValueColumns(puzzle, run, values)\n    const verticalRunValueColumns = this.makeVerticalRunValueColumns(puzzle, run, values)\n    return horizontalRunColumns\n      .concat(verticalRunColumns)\n      .concat(horizontalRunValueColumns)\n      .concat(verticalRunValueColumns)\n  }\n\n  getNumPrimaryColumns(puzzle: Puzzle): number | undefined {\n    return puzzle.horizontalRuns.length + puzzle.verticalRuns.length\n  }\n\n  makeHorizontalRunColumns(puzzle: Puzzle, run: Run): number[] {\n    const columns = Array(puzzle.horizontalRuns.length).fill(0)\n    if (run.runType === RunType.Horizontal) {\n      const index = this.findHorizontalRunIndex(puzzle, run)\n      columns[index] = 1\n    }\n    return columns\n  }\n\n  makeVerticalRunColumns(puzzle: Puzzle, run: Run): number[] {\n    const columns = Array(puzzle.verticalRuns.length).fill(0)\n    if (run.runType === RunType.Vertical) {\n      const index = this.findVerticalRunIndex(puzzle, run)\n      columns[index] = 1\n    }\n    return columns\n  }\n\n  makeHorizontalRunValueColumns(puzzle: Puzzle, run: Run, values: number[]): number[] {\n    const columns = Array(puzzle.unknowns.length * 9).fill(0)\n    for (const index of range(run.coordsList.length)) {\n      const value = values[index]\n      const encodedValue = run.runType === RunType.Horizontal\n        ? this.encodeValueNormal(value)\n        : this.encodeValueInverse(value)\n      const unknown = run.coordsList[index]\n      const unknownIndex = this.findUnknownIndex(puzzle, unknown)\n      for (const encodedValueIndex of range(9)) {\n        columns[unknownIndex * 9 + encodedValueIndex] = encodedValue[encodedValueIndex]\n      }\n    }\n    return columns\n  }\n\n  makeVerticalRunValueColumns(puzzle: Puzzle, run: Run, values: number[]): number[] {\n    const columns = Array(puzzle.unknowns.length * 9).fill(0)\n    for (const index of range(run.coordsList.length)) {\n      const value = values[index]\n      const encodedValue = run.runType === RunType.Vertical\n        ? this.encodeValueNormal(value)\n        : this.encodeValueInverse(value)\n      const unknown = run.coordsList[index]\n      const unknownIndex = this.findUnknownIndex(puzzle, unknown)\n      for (const encodedValueIndex of range(9)) {\n        columns[unknownIndex * 9 + encodedValueIndex] = encodedValue[encodedValueIndex]\n      }\n    }\n    return columns\n  }\n\n  encodeValueNormal(value: number): number[] {\n    const columns = Array(9).fill(0)\n    const index = value - 1\n    columns[index] = 1\n    return columns\n  }\n\n  encodeValueInverse(value: number): number[] {\n    const columns = Array(9).fill(1)\n    const index = value - 1\n    columns[index] = 0\n    return columns\n  }\n\n  findHorizontalRunIndex(puzzle: Puzzle, run: Run): number {\n    return puzzle.horizontalRuns.findIndex(r => sameRun(r, run))\n  }\n\n  findVerticalRunIndex(puzzle: Puzzle, run: Run): number {\n    return puzzle.verticalRuns.findIndex(r => sameRun(r, run))\n  }\n\n  findUnknownIndex(puzzle: Puzzle, unknown: Coords): number {\n    return puzzle.unknowns.findIndex(u => sameCoords(u, unknown))\n  }\n}\n","import { Coords, IDemo, sameCoords } from \"types\"\nimport { except, range, sum } from \"utils\"\nimport { Puzzle } from \"./puzzle\"\nimport { InternalRow } from \"./internal-row\"\nimport { RunGroup } from \"./run-group\"\nimport { RunGroupType } from \"./run-group-type\"\nimport { HorizontalRunGroup } from \"./horizontal-run-group\"\nimport { VerticalRunGroup } from \"./vertical-run-group\"\n\nexport class Demo implements IDemo<Puzzle, InternalRow> {\n\n  buildInternalRows(puzzle: Puzzle, checkForCancellation: () => boolean): InternalRow[] {\n\n    type StartingPositionData = {\n      startingPosition: number,\n      runLength: number\n    }\n\n    const size = puzzle.size\n    const internalRows: InternalRow[] = []\n\n    const buildInternalRowsForRunGroup = (runGroup: RunGroup): void => {\n      const workingSetOfStartingPositions: StartingPositionData[] = []\n\n      const recursivelyFindSetsOfStartingPositions = (startPosition: number, remainingLengths: number[]): void => {\n\n        if (internalRows.length % 1000 === 0) {\n          if (checkForCancellation()) return\n        }\n\n        if (remainingLengths.length === 0) {\n          if (workingSetOfStartingPositions.length === runGroup.lengths.length) {\n            const setOfStartingPositions = workingSetOfStartingPositions.slice().reverse()\n            const coordsLists: Coords[][] = []\n            for (const startingPositionData of setOfStartingPositions) {\n              const coordsList: Coords[] = []\n              for (const startingPosition of range(startingPositionData.runLength).map(x => x + startingPositionData.startingPosition)) {\n                const coords = this.makeRunGroupCoords(runGroup, startingPosition)\n                coordsList.push(coords)\n              }\n              coordsLists.push(coordsList)\n            }\n            const internalRow = { puzzle, runGroup, coordsLists }\n            internalRows.push(internalRow)\n          }\n          return\n        }\n\n        const runLength = remainingLengths[0]\n        const newRemainingLengths = remainingLengths.slice(1)\n        const sumOfRemainingLengths = sum(newRemainingLengths)\n        const requiredGaps = newRemainingLengths.length\n        const lastValidStartPosition = size - sumOfRemainingLengths - requiredGaps - runLength\n        const numValidStartPositions = lastValidStartPosition - startPosition + 1\n        const validStartPositions = range(numValidStartPositions).map(x => x + startPosition)\n\n        for (const validStartPosition of validStartPositions) {\n          const pair = { startingPosition: validStartPosition, runLength }\n          workingSetOfStartingPositions.push(pair)\n\n          const newStartPosition = validStartPosition + runLength + 1\n          recursivelyFindSetsOfStartingPositions(newStartPosition, newRemainingLengths)\n\n          workingSetOfStartingPositions.pop()\n        }\n      }\n\n      recursivelyFindSetsOfStartingPositions(0, runGroup.lengths)\n    }\n\n    for (const horizontalRunGroup of puzzle.horizontalRunGroups) {\n      buildInternalRowsForRunGroup(horizontalRunGroup)\n    }\n\n    for (const verticalRunGroup of puzzle.verticalRunGroups) {\n      buildInternalRowsForRunGroup(verticalRunGroup)\n    }\n\n    return internalRows\n  }\n\n  getNumPrimaryColumns(puzzle: Puzzle): number | undefined {\n    return puzzle.horizontalRunGroups.length + puzzle.verticalRunGroups.length\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    const { puzzle, runGroup, coordsLists } = internalRow\n    const rowColumns = this.makeRowColumns(puzzle, runGroup)\n    const colColumns = this.makeColColumns(puzzle, runGroup)\n    const horizontalBlockColumns = this.makeBlockColumns(puzzle, RunGroupType.Horizontal, runGroup, coordsLists)\n    const verticalBlockColumns = this.makeBlockColumns(puzzle, RunGroupType.Vertical, runGroup, coordsLists)\n    return rowColumns\n      .concat(colColumns)\n      .concat(horizontalBlockColumns)\n      .concat(verticalBlockColumns)\n  }\n\n  makeRowColumns(puzzle: Puzzle, runGroup: RunGroup): number[] {\n    const columns = Array(puzzle.horizontalRunGroups.length).fill(0)\n    if (runGroup.runGroupType === RunGroupType.Horizontal) {\n      const horizontalRunGroup = runGroup as HorizontalRunGroup\n      columns[horizontalRunGroup.row] = 1\n    }\n    return columns\n  }\n\n  makeColColumns(puzzle: Puzzle, runGroup: RunGroup): number[] {\n    const columns = Array(puzzle.verticalRunGroups.length).fill(0)\n    if (runGroup.runGroupType === RunGroupType.Vertical) {\n      const verticalRunGroup = runGroup as VerticalRunGroup\n      columns[verticalRunGroup.col] = 1\n    }\n    return columns\n  }\n\n  makeBlockColumns(\n    puzzle: Puzzle,\n    runGroupType: RunGroupType,\n    runGroup: RunGroup,\n    coordsLists: Coords[][]\n  ): number[] {\n    const size = puzzle.size\n    const columns = Array(size * size * 2).fill(0)\n    const selectedBlockCoords = coordsLists.flat()\n\n    if (runGroup.runGroupType === runGroupType) {\n      const allBlockCoords = range(size).map(otherValue => this.makeRunGroupCoords(runGroup, otherValue))\n      const unselectedBlockCoords = except(allBlockCoords, selectedBlockCoords, sameCoords)\n      for (const coords of selectedBlockCoords) {\n        this.markOn(columns, size, coords)\n      }\n      for (const coords of unselectedBlockCoords) {\n        this.markOff(columns, size, coords)\n      }\n    } else {\n      for (const coords of selectedBlockCoords) {\n        this.markOff(columns, size, coords)\n      }\n    }\n\n    return columns\n  }\n\n  private static ON_INDEX = 0\n  private static OFF_INDEX = 1\n\n  markOn(columns: number[], size: number, coords: Coords): void {\n    const baseIndex = (coords.row * size + coords.col) * 2\n    columns[baseIndex + Demo.ON_INDEX] = 1\n  }\n\n  markOff(columns: number[], size: number, coords: Coords): void {\n    var baseIndex = (coords.row * size + coords.col) * 2\n    columns[baseIndex + Demo.OFF_INDEX] = 1\n  }\n\n  makeRunGroupCoords(runGroup: RunGroup, otherValue: number): Coords {\n    if (runGroup.runGroupType === RunGroupType.Horizontal) {\n      const horizontalRunGroup = runGroup as HorizontalRunGroup\n      return { row: horizontalRunGroup.row, col: otherValue }\n    }\n    if (runGroup.runGroupType === RunGroupType.Vertical) {\n      const verticalRunGroup = runGroup as VerticalRunGroup\n      return { row: otherValue, col: verticalRunGroup.col }\n    }\n    throw new Error(\"[makeRunGroupCoords] unknown RunGroupType\")\n  }\n}\n","export enum ClueType { Across, Down }\n","import { Coords, IDemo, sameCoords } from \"types\"\nimport { range } from \"utils\"\nimport { ClueType } from \"./clue-type\"\nimport { InternalRow } from \"./internal-row\"\nimport { Puzzle } from \"./puzzle\"\n\nexport class Demo implements IDemo<Puzzle, InternalRow> {\n\n  buildInternalRows(puzzle: Puzzle, checkForCancellation: () => boolean): InternalRow[] {\n    const internalRows: InternalRow[] = []\n\n    for (const clue of puzzle.clues) {\n      for (const candidate of clue.candidates) {\n        const internalRow = { puzzle, clue, candidate }\n        internalRows.push(internalRow)\n      }\n    }\n\n    return internalRows\n  }\n\n  internalRowToMatrixRow(internalRow: InternalRow): number[] {\n    return this.makeColumns(internalRow)\n  }\n\n  getNumPrimaryColumns(puzzle: Puzzle): number | undefined {\n    return undefined\n  }\n\n  makeColumns(internalRow: InternalRow): number[] {\n    const crossCheckingSquares = internalRow.puzzle.crossCheckingSquares\n    const clue = internalRow.clue\n    const columns = Array(crossCheckingSquares.length * 26).fill(0)\n\n    const findCrossCheckingSquareIndex = (coords: Coords): number => {\n      return crossCheckingSquares.findIndex(crossCheckingSquare =>\n        sameCoords(crossCheckingSquare, coords))\n    }\n\n    for (const index of range(clue.coordsList.length)) {\n      const coords = clue.coordsList[index]\n      const crossCheckingSquareIndex = findCrossCheckingSquareIndex(coords)\n      if (crossCheckingSquareIndex >= 0) {\n        const letter = internalRow.candidate[index]\n        const encodedLetterColumns = this.encodeLetter(letter, clue.clueType)\n        const baseIndex = crossCheckingSquareIndex * 26\n        for (const encodedLetterIndex of range(encodedLetterColumns.length)) {\n          columns[baseIndex + encodedLetterIndex] = encodedLetterColumns[encodedLetterIndex]\n        }\n      }\n    }\n\n    return columns\n  }\n\n  encodeLetter(letter: string, clueType: ClueType): number[] {\n    const upperLetter = letter.toLocaleUpperCase()\n    const index = upperLetter.codePointAt(0)! - \"A\".codePointAt(0)!\n    const [onValue, offValue] = clueType === ClueType.Across ? [1, 0] : [0, 1]\n    const columns = Array(26).fill(offValue)\n    columns[index] = onValue\n    return columns\n  }\n}\n","// Unexpected use of 'self'.\n/* eslint-disable no-restricted-globals */\n\nimport * as dlxlib from \"dlxlib/dlx\"\nimport { Mode } from \"types\"\nimport { checkStopToken } from \"./stop-token\"\n\nimport { Demo as SudokuDemo } from \"demos/sudoku/demo\"\nimport { Demo as PentominoesDemo } from \"demos/pentominoes/demo\"\nimport { Demo as DraughtboardPuzzleDemo } from \"demos/draughtboard-puzzle/demo\"\nimport { Demo as NQueensDemo } from \"demos/n-queens/demo\"\nimport { Demo as TetraSticksDemo } from \"demos/tetrasticks/demo\"\nimport { Demo as AztecDiamondDemo } from \"demos/aztec-diamond/demo\"\nimport { Demo as RippleEffectDemo } from \"demos/ripple-effect/demo\"\nimport { Demo as FlowFreeDemo } from \"demos/flow-free/demo\"\nimport { Demo as KakuroDemo } from \"demos/kakuro/demo\"\nimport { Demo as NonogramDemo } from \"demos/nonogram/demo\"\nimport { Demo as CrosswordDemo } from \"demos/crossword/demo\"\n\nconst map = new Map<string, any>([\n  [\"sudoku\", SudokuDemo],\n  [\"pentominoes\", PentominoesDemo],\n  [\"draughtboard-puzzle\", DraughtboardPuzzleDemo],\n  [\"n-queens\", NQueensDemo],\n  [\"tetrasticks\", TetraSticksDemo],\n  [\"aztec-diamond\", AztecDiamondDemo],\n  [\"ripple-effect\", RippleEffectDemo],\n  [\"flow-free\", FlowFreeDemo],\n  [\"kakuro\", KakuroDemo],\n  [\"nonogram\", NonogramDemo],\n  [\"crossword\", CrosswordDemo]\n])\n\n// 'worker.ts' cannot be compiled under '--isolatedModules' because it is considered a global script file. Add an import, export, or an empty 'export {}' statement to make it a module.ts(1208)\nexport { }\n\ntype SearchStepEvent = {\n  partialSolution: number[],\n  stepIndex: number\n}\n\ntype SolutionFoundEvent = {\n  solution: number[],\n  solutionIndex: number\n}\n\nconst onSolve = (stopToken: string, shortName: string, puzzle: any, mode: Mode) => {\n\n  const checkForCancellation = (sendMessage: boolean = false) => {\n    const cancelled = checkStopToken(stopToken)\n    if (cancelled && sendMessage) {\n      console.log(\"[worker onSolve]\", \"cancelled!\")\n      self.postMessage({ type: \"cancelled\" })\n    }\n    return cancelled\n  }\n\n  console.log(\"[worker onSolve]\")\n  const demoConstructor = map.get(shortName)\n  if (!demoConstructor) {\n    self.postMessage({ type: \"error\", message: `unknown demo short name, \"${shortName}\"` })\n    return\n  }\n\n  const demo = new demoConstructor()\n\n  console.log(\"[worker onSolve]\", \"building internal rows...\")\n  const internalRows = demo.buildInternalRows(puzzle, checkForCancellation)\n  console.log(\"[worker onSolve]\", \"internalRows.length:\", internalRows.length)\n  if (checkForCancellation(true)) return\n\n  console.log(\"[worker onSolve]\", \"building matrix...\")\n  const matrix: any[] = []\n  for (let index = 0; index < internalRows.length; index++) {\n    if (index % 1000 === 0) {\n      if (checkForCancellation()) {\n        break\n      }\n    }\n    const internalRow = internalRows[index]\n    const matrixRow = demo.internalRowToMatrixRow(internalRow)\n    matrix.push(new Uint8Array(matrixRow))\n  }\n  console.log(\"[worker onSolve]\", \"matrix size:\", `${matrix.length}x${matrix[0].length}`)\n  if (checkForCancellation(true)) return\n\n  const options: dlxlib.Options = {\n    numSolutions: 1,\n    numPrimaryColumns: demo.getNumPrimaryColumns(puzzle),\n    checkForCancellation\n  }\n\n  let searchStepCount = 0\n\n  const onStep = (event: SearchStepEvent) => {\n    searchStepCount++\n    if (searchStepCount % 100 === 0) {\n      console.log(\"[worker onStep]\", \"searchStepCount:\", searchStepCount)\n    }\n    if (mode === Mode.SearchSteps) {\n      const partialSolution = event.partialSolution\n      const solutionInternalRows = partialSolution.map(index => internalRows[index])\n      self.postMessage({ type: \"searchStep\", solutionInternalRows })\n    }\n  }\n\n  const onSolution = (event: SolutionFoundEvent) => {\n    console.log(\"[worker onSolution]\", \"solutionIndex:\", event.solutionIndex)\n    const solution = event.solution\n    const solutionInternalRows = solution.map(index => internalRows[index])\n    self.postMessage({ type: \"solutionFound\", solutionInternalRows })\n  }\n\n  const dlx = new dlxlib.Dlx()\n  dlx.addListener(\"step\", onStep)\n  dlx.addListener(\"solution\", onSolution)\n\n  console.log(\"[worker onSolve]\", \"solving matrix...\")\n  // TODO: pass in checkForCancellation\n  const solutions = dlx.solve(matrix, options)\n  console.log(\"[worker onSolve]\", \"searchStepCount:\", searchStepCount)\n  console.log(\"[worker onSolve]\", \"solutions.length:\", solutions.length)\n  if (checkForCancellation(true)) return\n\n  self.postMessage({ type: \"finished\", numSolutionsFound: solutions.length })\n}\n\nself.onmessage = (ev: MessageEvent<any>) => {\n  try {\n    console.log(\"[worker onmessage]\", \"ev.data.type:\", ev.data.type)\n    if (ev.data.type === \"solve\") {\n      const stopToken = ev.data.stopToken as string\n      const shortName = ev.data.shortName as string\n      const mode = ev.data.mode as Mode\n      const { puzzle } = ev.data\n      onSolve(stopToken, shortName, puzzle, mode)\n      return\n    }\n\n    if (ev.data.type === \"close\") {\n      self.close()\n      return\n    }\n  } catch (error) {\n    console.error(\"error:\", error)\n    if (error instanceof Error) {\n      self.postMessage({ type: \"error\", message: error.message })\n    } else {\n      self.postMessage({ type: \"error\", message: String(error) })\n    }\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [625], function() { return __webpack_require__(9858); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"b56eb7ce\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/dlxlib-demos/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t858: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkdlxlib_demos\"] = self[\"webpackChunkdlxlib_demos\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(625).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["DataObject","listHeader","rowIndex","up","down","left","right","this","addDataObject","dataObject","fn","loop","propName","next","ColumnObject","previousColumnObject","nextColumnObject","numberOfRows","columnObject","appendToColumn","unlinkFromColumn","relinkIntoColumn","search","Dlx","checkOptions","options","undefined","numSolutions","Number","isInteger","Error","numPrimaryColumns","matrix","MAX_SAFE_INTEGER","solutions","iterator","solutionGenerator","index","iteratorResult","done","push","value","root","buildInternalStructure","searchState","SearchState","EventEmitter","length","colIndexToListHeader","Map","cancelled","forEach","row","checkForCancellation","firstDataObjectInThisRow","col","colIndex","appendColumnHeader","set","get","appendToRow","byAscendingRowIndices","rowIndex1","rowIndex2","checkForCancellationFrequency","getStepIndex","raiseSearchStepEvent","isEmpty","currentSolution","raiseSolutionFoundEvent","slice","sort","c","chooseColumnWithFewestRows","coverColumn","r","pushRowIndex","loopRight","j","loopLeft","uncoverColumn","popRowIndex","chosenColumn","loopNext","column","unlinkColumnHeader","loopDown","i","unlinkDataObject","loopUp","relinkDataObject","relinkColumnHeader","dlx","stepIndex","solutionIndex","pop","listenerCount","e","partialSolution","emit","solution","range","n","Array","from","keys","sum","ns","reduce","acc","maxBy","xs","selector","map","Math","max","defaultSameness","x1","x2","except","xs1","xs2","isSame","filter","some","CurrentState","Mode","reverseString","s","reverse","join","goUp","coords","goDown","goLeft","goRight","sameCoords","coords1","coords2","coordsComparer","rowDiff","colDiff","checkStopToken","stopToken","xhr","XMLHttpRequest","open","send","Orientation","Demo","puzzle","flatMap","initialValue","initialValues","find","iv","_buildInternalRowsForInitialValue","_buildInternalRowsForCoords","isInitialValue","internalRow","box","_rowColToBox","zeroBasedValue","posColumns","_oneHot","rowColumns","colColumns","boxColumns","concat","major","minor","columns","fill","floor","Colour","rotateCW","pattern","rowCount","colCount","rowIndices","transposed","reflect","toCoordsList","coordsList","piecesMap","pieces","label","reflectVariationCandidate","vc","reflected","makeVariation","orientation","piecesWithVariations","piece","north","North","northReflected","east","East","eastReflected","south","South","southReflected","west","West","allVariationCandidates","representations","Set","uniqueVariationCandidates","representation","has","add","variations","allLocations","allPossiblePiecePlacements","isValidPiecePlacement","pieceColumns","makePieceColumns","locationColumns","makeLocationColumns","variation","location","internalRows","fixedPieceLabels","pieceWithVariations","includes","findIndex","pwv","indices","indicesToExclude","_","toSquares","squares","colour","Black","White","square","size","diagonalColumnCount","diagonal1Columns","diagonal2Columns","diagonal1","diagonal2","lineSegments","polyLines","parsePolyLineDescriptions","polyLineDescriptions","split","trim","Boolean","parsePolyLineDescription","polyLineDescription","coordsString","lineSegmentDescriptions","horizontals","verticals","junctions","bits","bit","type","parsePiece","getDimensions","width","h","height","v","newHorizontals","newVerticals","newJunctions","newPolyLines","polyLine","rotateOrientationCW","allVariations","uniqueVariations","sortedHorizontals","sortedVerticals","hs","vs","normalisedRepresentation","horizontalsColumns","makeHorizontalsColumns","vertialsColumns","makeVerticalsColumns","junctionsColumns","makeJunctionsColumns","numPieces","pieceToOmit","horizontal","vertical","piecesInPlay","getPiecesInPlay","pip","junction","allHorizontals","centreRelativeRow","centreRelativeCol","abs","allVerticals","allJunctions","RunType","twoSidedPiecesMap","oneSidedPiecesMap","twoSidedPieces","oneSidedPieces","makeVariations","wantReflected","baseVariation","makeUnreflectedVariations","makeSolution","makeSolutionInternalRow","_puzzle","numFixedPieces","fixedInternalRows","makeThumbnailSolution","fixedInternalRow","fir","allLocationsInBoundingSquare","rooms","room","cell","givenCells","givenValues","cellsToSolve","cells","valuesToSolve","roomColumns","makeRoomColumns","rippleColumns","makeRippleColumns","startIndex","maxValue","arrayOfArrays","baseIndex","setRippleColumnBits","baseIndexOffset","transformCoords","rippleCells","getRippleCells","array","flat","findPaths","colourPair","start","goal","end","currentPath","paths","maxDirectionChanges","colourPairs","findPathsInternal","node","nextNode","path","countDirectionChanges","p","neighbours","dots","cp","d","isDot","count","p1","p3","sameRun","run1","run2","runType","coordsList1","coordsList2","sameCoordsList","RunGroupType","doPermute","nums","permutations","doPermuteInternal","list","swap","index1","index2","temp","DIGITS","createInternalRowsFor","runs","run","findSetsOfValues","setOfValues","values","horizontalRuns","verticalRuns","setsOfValues","helper","useds","remainingDigits","used","digit","horizontalRunColumns","makeHorizontalRunColumns","verticalRunColumns","makeVerticalRunColumns","horizontalRunValueColumns","makeHorizontalRunValueColumns","verticalRunValueColumns","makeVerticalRunValueColumns","Horizontal","findHorizontalRunIndex","Vertical","findVerticalRunIndex","unknowns","encodedValue","encodeValueNormal","encodeValueInverse","unknown","unknownIndex","findUnknownIndex","encodedValueIndex","u","ClueType","buildInternalRowsForRunGroup","runGroup","workingSetOfStartingPositions","recursivelyFindSetsOfStartingPositions","startPosition","remainingLengths","runLength","newRemainingLengths","sumOfRemainingLengths","requiredGaps","validStartPositions","x","validStartPosition","pair","startingPosition","lengths","setOfStartingPositions","coordsLists","startingPositionData","makeRunGroupCoords","horizontalRunGroups","verticalRunGroups","makeRowColumns","makeColColumns","horizontalBlockColumns","makeBlockColumns","verticalBlockColumns","runGroupType","selectedBlockCoords","unselectedBlockCoords","otherValue","markOn","markOff","ON_INDEX","OFF_INDEX","clues","clue","candidates","candidate","makeColumns","crossCheckingSquares","findCrossCheckingSquareIndex","crossCheckingSquare","crossCheckingSquareIndex","letter","encodedLetterColumns","encodeLetter","clueType","encodedLetterIndex","toLocaleUpperCase","codePointAt","Across","onValue","offValue","SudokuDemo","PentominoesDemo","DraughtboardPuzzleDemo","NQueensDemo","TetraSticksDemo","AztecDiamondDemo","RippleEffectDemo","FlowFreeDemo","KakuroDemo","NonogramDemo","CrosswordDemo","self","onmessage","ev","console","log","data","shortName","mode","sendMessage","postMessage","demoConstructor","demo","buildInternalRows","matrixRow","internalRowToMatrixRow","Uint8Array","getNumPrimaryColumns","searchStepCount","dlxlib","addListener","event","SearchSteps","solutionInternalRows","solve","numSolutionsFound","message","onSolve","close","error","String","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","result","chunkIds","priority","notFulfilled","Infinity","fulfilled","Object","every","key","splice","getter","__esModule","a","definition","o","defineProperty","enumerable","f","chunkId","Promise","all","promises","miniCssF","obj","prop","prototype","hasOwnProperty","call","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","then"],"sourceRoot":""}